
CAN_Basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  0000026c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000027b  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000177  00000000  00000000  000005a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a5  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020d  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b4  00000000  00000000  00000b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000c11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_12>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	ab 30       	cpi	r26, 0x0B	; 11
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
// Includes
#include "timer.h"

int main(void) {
    
    timer1_1ms_init();      // Initialize timer1 for 1ms interrupts (systck). Also starts sysclk
  a4:	0e 94 c4 00 	call	0x188	; 0x188 <timer1_1ms_init>
    STATUS_LED_INIT();
  a8:	3f 9a       	sbi	0x07, 7	; 7
    STATUS_LED_ON();
  aa:	47 98       	cbi	0x08, 7	; 8
    sei();
  ac:	78 94       	sei
    
    while (1)  {
        delay(500);         // Delay 1/2 second
  ae:	84 ef       	ldi	r24, 0xF4	; 244
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <delay>
        STATUS_LED_TOG();   // Toggle status led
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	80 58       	subi	r24, 0x80	; 128
  ba:	88 b9       	out	0x08, r24	; 8
    }
  bc:	f8 cf       	rjmp	.-16     	; 0xae <main+0xa>

000000be <__vector_12>:
volatile uint8_t systime_s = 0;
volatile uint8_t systime_m = 0;
volatile uint8_t systime_h = 0;
volatile uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
    /* Increment systck global vars to keep system time */
    systck++;
  d2:	80 91 07 01 	lds	r24, 0x0107
  d6:	90 91 08 01 	lds	r25, 0x0108
  da:	a0 91 09 01 	lds	r26, 0x0109
  de:	b0 91 0a 01 	lds	r27, 0x010A
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	a1 1d       	adc	r26, r1
  e6:	b1 1d       	adc	r27, r1
  e8:	80 93 07 01 	sts	0x0107, r24
  ec:	90 93 08 01 	sts	0x0108, r25
  f0:	a0 93 09 01 	sts	0x0109, r26
  f4:	b0 93 0a 01 	sts	0x010A, r27
    systime_ms++;
  f8:	80 91 05 01 	lds	r24, 0x0105
  fc:	90 91 06 01 	lds	r25, 0x0106
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 06 01 	sts	0x0106, r25
 106:	80 93 05 01 	sts	0x0105, r24
    if(systime_ms >= 1000) {
 10a:	80 91 05 01 	lds	r24, 0x0105
 10e:	90 91 06 01 	lds	r25, 0x0106
 112:	88 3e       	cpi	r24, 0xE8	; 232
 114:	93 40       	sbci	r25, 0x03	; 3
 116:	70 f1       	brcs	.+92     	; 0x174 <__vector_12+0xb6>
        systime_ms = 0;
 118:	10 92 06 01 	sts	0x0106, r1
 11c:	10 92 05 01 	sts	0x0105, r1
        systime_s++;
 120:	80 91 04 01 	lds	r24, 0x0104
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 04 01 	sts	0x0104, r24
        if(systime_s >= 60) {
 12a:	80 91 04 01 	lds	r24, 0x0104
 12e:	8c 33       	cpi	r24, 0x3C	; 60
 130:	08 f1       	brcs	.+66     	; 0x174 <__vector_12+0xb6>
            systime_s = 0;
 132:	10 92 04 01 	sts	0x0104, r1
            systime_m++;
 136:	80 91 03 01 	lds	r24, 0x0103
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	80 93 03 01 	sts	0x0103, r24
            if(systime_m >= 60) {
 140:	80 91 03 01 	lds	r24, 0x0103
 144:	8c 33       	cpi	r24, 0x3C	; 60
 146:	b0 f0       	brcs	.+44     	; 0x174 <__vector_12+0xb6>
                systime_m = 0;
 148:	10 92 03 01 	sts	0x0103, r1
                systime_h++;
 14c:	80 91 02 01 	lds	r24, 0x0102
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 02 01 	sts	0x0102, r24
                if(systime_h >= 24) {
 156:	80 91 02 01 	lds	r24, 0x0102
 15a:	88 31       	cpi	r24, 0x18	; 24
 15c:	58 f0       	brcs	.+22     	; 0x174 <__vector_12+0xb6>
                    systime_h = 0;
 15e:	10 92 02 01 	sts	0x0102, r1
                    systime_d++;
 162:	80 91 00 01 	lds	r24, 0x0100
 166:	90 91 01 01 	lds	r25, 0x0101
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	90 93 01 01 	sts	0x0101, r25
 170:	80 93 00 01 	sts	0x0100, r24
                }
            }
        }        
    }
}
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <timer1_1ms_init>:
/*!
* @brief Disable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_disable(void) {
    TIMSK1 &= ~(1<<OCIE1A);                         // Disable Output compare Interrupt on Match A
 188:	af e6       	ldi	r26, 0x6F	; 111
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	8c 91       	ld	r24, X
 18e:	8d 7f       	andi	r24, 0xFD	; 253
 190:	8c 93       	st	X, r24
    TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); // Disable timer1 clock source (disables timer)
 192:	e1 e8       	ldi	r30, 0x81	; 129
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 7f       	andi	r24, 0xF8	; 248
 19a:	80 83       	st	Z, r24
*/
void timer1_1ms_init(void) {
    static uint16_t timer1_1ms_compare_value = 250-1;
        
    timer1_disable();
    TCCR1A = 0x00;  // Make sure no pins are set to output
 19c:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= (1<<WGM12) | TIMER1_PRESCALE_MASK;  // Set CTC, prescalar to clk(io)/64 (250 counts per 1ms)
 1a0:	80 81       	ld	r24, Z
 1a2:	8b 60       	ori	r24, 0x0B	; 11
 1a4:	80 83       	st	Z, r24
    OCR1A = timer1_1ms_compare_value;    
 1a6:	89 ef       	ldi	r24, 0xF9	; 249
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 89 00 	sts	0x0089, r25
 1ae:	80 93 88 00 	sts	0x0088, r24
/*!
* @brief Enable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_enable(void) {
    TIMSK1 |= (1<<OCIE1A);              // Enable Output Compare Interrupt on Match A
 1b2:	8c 91       	ld	r24, X
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALE_MASK;     // Enable timer1 clock source (disables timer)
 1b8:	80 81       	ld	r24, Z
 1ba:	83 60       	ori	r24, 0x03	; 3
 1bc:	80 83       	st	Z, r24
 1be:	08 95       	ret

000001c0 <delay>:
* @brief Delay milliseconds
* @param uint16_t delay_ms  Time to delay in milliseconds
* @return void
*/
void delay(uint16_t delay_ms) {
    uint32_t systck_1 = systck;
 1c0:	40 91 07 01 	lds	r20, 0x0107
 1c4:	50 91 08 01 	lds	r21, 0x0108
 1c8:	60 91 09 01 	lds	r22, 0x0109
 1cc:	70 91 0a 01 	lds	r23, 0x010A
    while(systck < (systck_1 + delay_ms));  // delay
 1d0:	48 0f       	add	r20, r24
 1d2:	59 1f       	adc	r21, r25
 1d4:	61 1d       	adc	r22, r1
 1d6:	71 1d       	adc	r23, r1
 1d8:	80 91 07 01 	lds	r24, 0x0107
 1dc:	90 91 08 01 	lds	r25, 0x0108
 1e0:	a0 91 09 01 	lds	r26, 0x0109
 1e4:	b0 91 0a 01 	lds	r27, 0x010A
 1e8:	84 17       	cp	r24, r20
 1ea:	95 07       	cpc	r25, r21
 1ec:	a6 07       	cpc	r26, r22
 1ee:	b7 07       	cpc	r27, r23
 1f0:	98 f3       	brcs	.-26     	; 0x1d8 <delay+0x18>
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
