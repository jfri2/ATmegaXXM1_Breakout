
CANBusMonitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  000027d8  0000286c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800232  00800232  0000299e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000299e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a33  00000000  00000000  00002b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000025a  00000000  00000000  0000354f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a1  00000000  00000000  000037a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00003e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f5  00000000  00000000  000041c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000752  00000000  00000000  000047b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004f07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_12>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	8d 03       	fmulsu	r16, r21
      7e:	83 04       	cpc	r8, r3
      80:	6d 05       	cpc	r22, r13
      82:	3b 06       	cpc	r3, r27
      84:	be 06       	cpc	r11, r30
      86:	4e 07       	cpc	r20, r30
      88:	e8 07       	cpc	r30, r24
      8a:	0e 09       	sbc	r16, r14
      8c:	41 0a       	sbc	r4, r17
      8e:	7e 0b       	sbc	r23, r30
      90:	34 0c       	add	r3, r4

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	12 e0       	ldi	r17, 0x02	; 2
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	e8 ed       	ldi	r30, 0xD8	; 216
      a6:	f7 e2       	ldi	r31, 0x27	; 39
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a2 33       	cpi	r26, 0x32	; 50
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	22 e0       	ldi	r18, 0x02	; 2
      b6:	a2 e3       	ldi	r26, 0x32	; 50
      b8:	b2 e0       	ldi	r27, 0x02	; 2
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	ae 36       	cpi	r26, 0x6E	; 110
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <main>
      c8:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <gpio_init>:
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	84 e2       	ldi	r24, 0x24	; 36
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	2f ef       	ldi	r18, 0xFF	; 255
      de:	fc 01       	movw	r30, r24
      e0:	20 83       	st	Z, r18
      e2:	87 e2       	ldi	r24, 0x27	; 39
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	27 e0       	ldi	r18, 0x07	; 7
      e8:	fc 01       	movw	r30, r24
      ea:	20 83       	st	Z, r18
      ec:	8a e2       	ldi	r24, 0x2A	; 42
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	2b ef       	ldi	r18, 0xFB	; 251
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
      f6:	87 e2       	ldi	r24, 0x27	; 39
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	27 e2       	ldi	r18, 0x27	; 39
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	20 81       	ld	r18, Z
     102:	20 68       	ori	r18, 0x80	; 128
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	08 95       	ret

0000010e <timer1_init>:
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	8f e6       	ldi	r24, 0x6F	; 111
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	2f e6       	ldi	r18, 0x6F	; 111
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	f9 01       	movw	r30, r18
     120:	20 81       	ld	r18, Z
     122:	2d 7f       	andi	r18, 0xFD	; 253
     124:	fc 01       	movw	r30, r24
     126:	20 83       	st	Z, r18
     128:	81 e8       	ldi	r24, 0x81	; 129
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	21 e8       	ldi	r18, 0x81	; 129
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	f9 01       	movw	r30, r18
     132:	20 81       	ld	r18, Z
     134:	28 7f       	andi	r18, 0xF8	; 248
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
     13a:	80 e8       	ldi	r24, 0x80	; 128
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	fc 01       	movw	r30, r24
     140:	10 82       	st	Z, r1
     142:	81 e8       	ldi	r24, 0x81	; 129
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	21 e8       	ldi	r18, 0x81	; 129
     148:	30 e0       	ldi	r19, 0x00	; 0
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
     14a:	f9 01       	movw	r30, r18
     14c:	20 81       	ld	r18, Z
     14e:	2b 60       	ori	r18, 0x0B	; 11
     150:	fc 01       	movw	r30, r24
     152:	20 83       	st	Z, r18
     154:	88 e8       	ldi	r24, 0x88	; 136
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	20 91 16 01 	lds	r18, 0x0116
     15c:	30 91 17 01 	lds	r19, 0x0117
     160:	fc 01       	movw	r30, r24
     162:	31 83       	std	Z+1, r19	; 0x01
     164:	20 83       	st	Z, r18
     166:	8f e6       	ldi	r24, 0x6F	; 111
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	2f e6       	ldi	r18, 0x6F	; 111
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	f9 01       	movw	r30, r18
     170:	20 81       	ld	r18, Z
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
     172:	22 60       	ori	r18, 0x02	; 2
     174:	fc 01       	movw	r30, r24
     176:	20 83       	st	Z, r18
     178:	81 e8       	ldi	r24, 0x81	; 129
        try_conf = 0;       //! Look for the next configuration
     17a:	90 e0       	ldi	r25, 0x00	; 0
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
     17c:	21 e8       	ldi	r18, 0x81	; 129
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	f9 01       	movw	r30, r18
    {
        Can_set_mob(u8_temp0);  //! Page index
     182:	20 81       	ld	r18, Z
     184:	23 60       	ori	r18, 0x03	; 3
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	08 95       	ret

00000190 <uart_init>:
        Can_clear_mob();        //! All MOb Registers = 0x00
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	2c 97       	sbiw	r28, 0x0c	; 12
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
     1a8:	69 83       	std	Y+1, r22	; 0x01
     1aa:	7a 83       	std	Y+2, r23	; 0x02
     1ac:	8b 83       	std	Y+3, r24	; 0x03
     1ae:	9c 83       	std	Y+4, r25	; 0x04
     1b0:	88 ec       	ldi	r24, 0xC8	; 200
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	2f e0       	ldi	r18, 0x0F	; 15
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     1b6:	fc 01       	movw	r30, r24
     1b8:	20 83       	st	Z, r18
     1ba:	0e ec       	ldi	r16, 0xCE	; 206
     1bc:	10 e0       	ldi	r17, 0x00	; 0
     1be:	80 e2       	ldi	r24, 0x20	; 32
     1c0:	91 ea       	ldi	r25, 0xA1	; 161
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     1c2:	a7 e0       	ldi	r26, 0x07	; 7
    {
        if (try_conf == 1)
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	29 81       	ldd	r18, Y+1	; 0x01
     1c8:	3a 81       	ldd	r19, Y+2	; 0x02
     1ca:	4b 81       	ldd	r20, Y+3	; 0x03
        {
            Can_reset();
     1cc:	5c 81       	ldd	r21, Y+4	; 0x04
     1ce:	bc 01       	movw	r22, r24
     1d0:	cd 01       	movw	r24, r26
     1d2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__udivmodsi4>
            conf_index++;
     1d6:	da 01       	movw	r26, r20
     1d8:	c9 01       	movw	r24, r18
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	a1 09       	sbc	r26, r1
     1de:	b1 09       	sbc	r27, r1
            ovrtim_flag=0;
     1e0:	89 2f       	mov	r24, r25

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
     1e2:	9a 2f       	mov	r25, r26
     1e4:	ab 2f       	mov	r26, r27
     1e6:	bb 27       	eor	r27, r27
     1e8:	f8 01       	movw	r30, r16
     1ea:	80 83       	st	Z, r24
     1ec:	0d ec       	ldi	r16, 0xCD	; 205
     1ee:	10 e0       	ldi	r17, 0x00	; 0
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
     1f0:	80 e2       	ldi	r24, 0x20	; 32
     1f2:	91 ea       	ldi	r25, 0xA1	; 161
     1f4:	a7 e0       	ldi	r26, 0x07	; 7
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	29 81       	ldd	r18, Y+1	; 0x01
     1fa:	3a 81       	ldd	r19, Y+2	; 0x02
     1fc:	4b 81       	ldd	r20, Y+3	; 0x03
     1fe:	5c 81       	ldd	r21, Y+4	; 0x04
     200:	bc 01       	movw	r22, r24
     202:	cd 01       	movw	r24, r26
     204:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__udivmodsi4>
     208:	da 01       	movw	r26, r20
     20a:	c9 01       	movw	r24, r18
     20c:	81 50       	subi	r24, 0x01	; 1
     20e:	f8 01       	movw	r30, r16
     210:	80 83       	st	Z, r24
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	90 93 6b 02 	sts	0x026B, r25
     21a:	80 93 6a 02 	sts	0x026A, r24
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	90 93 69 02 	sts	0x0269, r25
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     226:	80 93 68 02 	sts	0x0268, r24
     22a:	2c 96       	adiw	r28, 0x0c	; 12
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	f8 94       	cli
     230:	de bf       	out	0x3e, r29	; 62
     232:	0f be       	out	0x3f, r0	; 63
     234:	cd bf       	out	0x3d, r28	; 61
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	08 95       	ret

00000240 <uart_SendByteStream>:
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	00 d0       	rcall	.+0      	; 0x246 <uart_SendByteStream+0x6>
     246:	1f 92       	push	r1
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	7b 83       	std	Y+3, r23	; 0x03
     250:	6a 83       	std	Y+2, r22	; 0x02
     252:	00 00       	nop
     254:	89 ec       	ldi	r24, 0xC9	; 201
     256:	90 e0       	ldi	r25, 0x00	; 0

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (uint8_t)(conf_index >> 3);
     258:	fc 01       	movw	r30, r24
     25a:	80 81       	ld	r24, Z
     25c:	88 2f       	mov	r24, r24
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	80 71       	andi	r24, 0x10	; 16
     262:	99 27       	eor	r25, r25
     264:	89 2b       	or	r24, r25
     266:	b1 f7       	brne	.-20     	; 0x254 <uart_SendByteStream+0x14>
     268:	82 ed       	ldi	r24, 0xD2	; 210
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	29 81       	ldd	r18, Y+1	; 0x01
     26e:	fc 01       	movw	r30, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
     270:	20 83       	st	Z, r18
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <uart_GetByteStream>:
     27e:	cf 93       	push	r28
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
     280:	df 93       	push	r29
     282:	00 d0       	rcall	.+0      	; 0x284 <uart_GetByteStream+0x6>
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	9a 83       	std	Y+2, r25	; 0x02

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
     28a:	89 83       	std	Y+1, r24	; 0x01
     28c:	00 00       	nop
     28e:	89 ec       	ldi	r24, 0xC9	; 201
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	fc 01       	movw	r30, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     294:	80 81       	ld	r24, Z
     296:	88 2f       	mov	r24, r24
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	80 71       	andi	r24, 0x10	; 16
     29c:	99 27       	eor	r25, r25
     29e:	89 2b       	or	r24, r25
     2a0:	b1 f7       	brne	.-20     	; 0x28e <uart_GetByteStream+0x10>
     2a2:	82 ed       	ldi	r24, 0xD2	; 210
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	fc 01       	movw	r30, r24
     2a8:	80 81       	ld	r24, Z
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <logEvent>:
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     2b4:	cf 93       	push	r28
        {
            u8_temp0 = CANSTMOB;
     2b6:	df 93       	push	r29
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <logEvent+0x6>
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	9a 83       	std	Y+2, r25	; 0x02
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
     2c0:	89 83       	std	Y+1, r24	; 0x01
     2c2:	e0 91 5f 02 	lds	r30, 0x025F
     2c6:	f0 91 60 02 	lds	r31, 0x0260
     2ca:	80 91 61 02 	lds	r24, 0x0261
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     2ce:	68 2f       	mov	r22, r24
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
     2d0:	70 e0       	ldi	r23, 0x00	; 0
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     2d2:	80 91 62 02 	lds	r24, 0x0262
                bt_performed = 1;   //! Return flag = TRUE
     2d6:	48 2f       	mov	r20, r24
                DISABLE_MOB;        //! Disable MOb-0
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	80 91 63 02 	lds	r24, 0x0263
     2de:	28 2f       	mov	r18, r24
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	80 91 64 02 	lds	r24, 0x0264
     2e6:	90 91 65 02 	lds	r25, 0x0265
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     2ea:	af 2f       	mov	r26, r31
     2ec:	af 93       	push	r26
     2ee:	ef 93       	push	r30
     2f0:	e7 2f       	mov	r30, r23
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     2f2:	ef 93       	push	r30
     2f4:	6f 93       	push	r22
     2f6:	65 2f       	mov	r22, r21
     2f8:	6f 93       	push	r22
     2fa:	4f 93       	push	r20
     2fc:	43 2f       	mov	r20, r19
     2fe:	4f 93       	push	r20
     300:	2f 93       	push	r18
     302:	29 2f       	mov	r18, r25
     304:	2f 93       	push	r18
     306:	8f 93       	push	r24
     308:	88 e1       	ldi	r24, 0x18	; 24
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	89 2f       	mov	r24, r25
     30e:	8f 93       	push	r24
     310:	88 e1       	ldi	r24, 0x18	; 24
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	8f 93       	push	r24
     316:	0e 94 1f 11 	call	0x223e	; 0x223e <printf>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     31a:	8d b7       	in	r24, 0x3d	; 61
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     31c:	9e b7       	in	r25, 0x3e	; 62
                }

                u8_temp0 = CANGIT;
     31e:	0c 96       	adiw	r24, 0x0c	; 12
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	8f 93       	push	r24
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	8f 93       	push	r24
     332:	0e 94 1f 11 	call	0x223e	; 0x223e <printf>
                {
                    if (ovrtim_flag==0)
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     33c:	0f 90       	pop	r0
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <__vector_12>:
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	00 90 5f 00 	lds	r0, 0x005F
     34c:	0f 92       	push	r0
                        ovrtim_flag++;
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	8f 93       	push	r24
     354:	9f 93       	push	r25
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     356:	af 93       	push	r26
     358:	bf 93       	push	r27
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	80 91 5b 02 	lds	r24, 0x025B
     366:	90 91 5c 02 	lds	r25, 0x025C
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
     36a:	a0 91 5d 02 	lds	r26, 0x025D
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
     36e:	b0 91 5e 02 	lds	r27, 0x025E
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	a1 1d       	adc	r26, r1
     376:	b1 1d       	adc	r27, r1
     378:	80 93 5b 02 	sts	0x025B, r24
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     37c:	90 93 5c 02 	sts	0x025C, r25
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     380:	a0 93 5d 02 	sts	0x025D, r26
                    try_conf = 1;       //! Try this configuration
     384:	b0 93 5e 02 	sts	0x025E, r27
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     388:	80 91 5f 02 	lds	r24, 0x025F
     38c:	90 91 60 02 	lds	r25, 0x0260
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	90 93 60 02 	sts	0x0260, r25
     396:	80 93 5f 02 	sts	0x025F, r24
     39a:	80 91 5f 02 	lds	r24, 0x025F
            phs1_inc = 1;
     39e:	90 91 60 02 	lds	r25, 0x0260

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
     3a2:	88 3e       	cpi	r24, 0xE8	; 232
     3a4:	93 40       	sbci	r25, 0x03	; 3
     3a6:	70 f1       	brcs	.+92     	; 0x404 <__vector_12+0xc0>
     3a8:	10 92 60 02 	sts	0x0260, r1
            {
                phs1 = PHS1_MIN;
     3ac:	10 92 5f 02 	sts	0x025F, r1
                phs2 = PHS2_MIN;
     3b0:	80 91 61 02 	lds	r24, 0x0261
                phs1_inc = 0;
     3b4:	8f 5f       	subi	r24, 0xFF	; 255
                if (ntq != NTQ_MAX) ntq++;
     3b6:	80 93 61 02 	sts	0x0261, r24
     3ba:	80 91 61 02 	lds	r24, 0x0261
     3be:	8c 33       	cpi	r24, 0x3C	; 60
     3c0:	08 f1       	brcs	.+66     	; 0x404 <__vector_12+0xc0>
     3c2:	10 92 61 02 	sts	0x0261, r1
                else
                {
                    ntq = NTQ_MIN;
     3c6:	80 91 62 02 	lds	r24, 0x0262
                    if (brp != BRP_MAX) brp++;
     3ca:	8f 5f       	subi	r24, 0xFF	; 255
     3cc:	80 93 62 02 	sts	0x0262, r24
     3d0:	80 91 62 02 	lds	r24, 0x0262
     3d4:	8c 33       	cpi	r24, 0x3C	; 60
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
     3d6:	b0 f0       	brcs	.+44     	; 0x404 <__vector_12+0xc0>
                        bt_performed = 0;   //! Return flag = FALSE
     3d8:	10 92 62 02 	sts	0x0262, r1
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                        DISABLE_MOB;        //! Disable MOb-0
     3dc:	80 91 63 02 	lds	r24, 0x0263
     3e0:	8f 5f       	subi	r24, 0xFF	; 255
     3e2:	80 93 63 02 	sts	0x0263, r24
     3e6:	80 91 63 02 	lds	r24, 0x0263
     3ea:	88 31       	cpi	r24, 0x18	; 24
     3ec:	58 f0       	brcs	.+22     	; 0x404 <__vector_12+0xc0>
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     3ee:	10 92 63 02 	sts	0x0263, r1
     3f2:	80 91 64 02 	lds	r24, 0x0264
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     3f6:	90 91 65 02 	lds	r25, 0x0265
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	90 93 65 02 	sts	0x0265, r25
     400:	80 93 64 02 	sts	0x0264, r24
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	bf 91       	pop	r27
     40a:	af 91       	pop	r26
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
     40c:	9f 91       	pop	r25
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
     40e:	8f 91       	pop	r24
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
     414:	00 92 5f 00 	sts	0x005F, r0
     418:	0f 90       	pop	r0
     41a:	1f 90       	pop	r1
     41c:	18 95       	reti

0000041e <can_clear_all_mob>:
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	00 d0       	rcall	.+0      	; 0x424 <can_clear_all_mob+0x6>
     424:	1f 92       	push	r1
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	19 82       	std	Y+1, r1	; 0x01
     42c:	1d c0       	rjmp	.+58     	; 0x468 <can_clear_all_mob+0x4a>
     42e:	8d ee       	ldi	r24, 0xED	; 237
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	29 81       	ldd	r18, Y+1	; 0x01
                }
                else
                {
                phs2=phs1;
     434:	22 95       	swap	r18
     436:	20 7f       	andi	r18, 0xF0	; 240
                }
                prs = ntq - ( phs1 + phs2 + 1 );
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
     43c:	8e ee       	ldi	r24, 0xEE	; 238
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	9b 83       	std	Y+3, r25	; 0x03
     442:	8a 83       	std	Y+2, r24	; 0x02
     444:	09 c0       	rjmp	.+18     	; 0x458 <can_clear_all_mob+0x3a>
     446:	8a 81       	ldd	r24, Y+2	; 0x02
     448:	9b 81       	ldd	r25, Y+3	; 0x03

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
     44a:	fc 01       	movw	r30, r24
     44c:	10 82       	st	Z, r1
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	9b 81       	ldd	r25, Y+3	; 0x03
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	9b 83       	std	Y+3, r25	; 0x03
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
     456:	8a 83       	std	Y+2, r24	; 0x02
     458:	8a 81       	ldd	r24, Y+2	; 0x02
     45a:	9b 81       	ldd	r25, Y+3	; 0x03
     45c:	88 3f       	cpi	r24, 0xF8	; 248
     45e:	91 05       	cpc	r25, r1
     460:	90 f3       	brcs	.-28     	; 0x446 <can_clear_all_mob+0x28>
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	8f 5f       	subi	r24, 0xFF	; 255
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	86 30       	cpi	r24, 0x06	; 6
     46c:	00 f3       	brcs	.-64     	; 0x42e <can_clear_all_mob+0x10>
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <can_get_mob_free>:
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	00 d0       	rcall	.+0      	; 0x480 <can_get_mob_free+0x6>
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	8d ee       	ldi	r24, 0xED	; 237
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	fc 01       	movw	r30, r24
     48a:	80 81       	ld	r24, Z
     48c:	8a 83       	std	Y+2, r24	; 0x02
     48e:	19 82       	std	Y+1, r1	; 0x01
     490:	1b c0       	rjmp	.+54     	; 0x4c8 <can_get_mob_free+0x4e>
     492:	8d ee       	ldi	r24, 0xED	; 237
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	29 81       	ldd	r18, Y+1	; 0x01
     498:	22 95       	swap	r18
     49a:	20 7f       	andi	r18, 0xF0	; 240
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
     4a0:	8f ee       	ldi	r24, 0xEF	; 239
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	fc 01       	movw	r30, r24
     4a6:	80 81       	ld	r24, Z
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	80 7c       	andi	r24, 0xC0	; 192
     4ae:	99 27       	eor	r25, r25
     4b0:	89 2b       	or	r24, r25
     4b2:	39 f4       	brne	.+14     	; 0x4c2 <can_get_mob_free+0x48>
     4b4:	8d ee       	ldi	r24, 0xED	; 237
     4b6:	90 e0       	ldi	r25, 0x00	; 0
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
     4b8:	2a 81       	ldd	r18, Y+2	; 0x02
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	0c c0       	rjmp	.+24     	; 0x4da <can_get_mob_free+0x60>
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	8f 5f       	subi	r24, 0xFF	; 255
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	86 30       	cpi	r24, 0x06	; 6
     4cc:	10 f3       	brcs	.-60     	; 0x492 <can_get_mob_free+0x18>
                }
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
     4ce:	8d ee       	ldi	r24, 0xED	; 237
}
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	2a 81       	ldd	r18, Y+2	; 0x02
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    return (NO_MOB);
}
     4e2:	08 95       	ret

000004e4 <can_get_mob_status>:
//!          -  MOB_CRC_ERROR
//!          -  MOB_STUFF_ERROR
//!          -  MOB_BIT_ERROR
//------------------------------------------------------------------------------
uint8_t can_get_mob_status(void)
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <can_get_mob_status+0x6>
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     4ee:	8f ee       	ldi	r24, 0xEF	; 239
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	fc 01       	movw	r30, r24
     4f4:	80 81       	ld	r24, Z
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	80 7c       	andi	r24, 0xC0	; 192
     4fc:	99 27       	eor	r25, r25
     4fe:	89 2b       	or	r24, r25
     500:	11 f4       	brne	.+4      	; 0x506 <can_get_mob_status+0x22>
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	1c c0       	rjmp	.+56     	; 0x53e <can_get_mob_status+0x5a>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     506:	8e ee       	ldi	r24, 0xEE	; 238
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	fc 01       	movw	r30, r24
     50c:	80 81       	ld	r24, Z
     50e:	89 83       	std	Y+1, r24	; 0x01

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	80 7e       	andi	r24, 0xE0	; 224
     514:	8a 83       	std	Y+2, r24	; 0x02
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     516:	8a 81       	ldd	r24, Y+2	; 0x02
     518:	80 32       	cpi	r24, 0x20	; 32
     51a:	31 f0       	breq	.+12     	; 0x528 <can_get_mob_status+0x44>
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	80 34       	cpi	r24, 0x40	; 64
     520:	19 f0       	breq	.+6      	; 0x528 <can_get_mob_status+0x44>
         (mob_status==MOB_TX_COMPLETED) ||   \
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	80 3a       	cpi	r24, 0xA0	; 160
     526:	11 f4       	brne	.+4      	; 0x52c <can_get_mob_status+0x48>
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     528:	8a 81       	ldd	r24, Y+2	; 0x02
     52a:	09 c0       	rjmp	.+18     	; 0x53e <can_get_mob_status+0x5a>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	8f 71       	andi	r24, 0x1F	; 31
     530:	8a 83       	std	Y+2, r24	; 0x02
    if (mob_status != 0) { return(mob_status); }
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	88 23       	and	r24, r24
     536:	11 f0       	breq	.+4      	; 0x53c <can_get_mob_status+0x58>
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	01 c0       	rjmp	.+2      	; 0x53e <can_get_mob_status+0x5a>

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
     53c:	80 e0       	ldi	r24, 0x00	; 0
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	00 d0       	rcall	.+0      	; 0x54e <can_get_data+0x6>
     54e:	1f 92       	push	r1
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	9b 83       	std	Y+3, r25	; 0x03
     556:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     558:	19 82       	std	Y+1, r1	; 0x01
     55a:	10 c0       	rjmp	.+32     	; 0x57c <can_get_data+0x34>
    {
        *(p_can_message_data + data_index) = CANMSG;
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	88 2f       	mov	r24, r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	2a 81       	ldd	r18, Y+2	; 0x02
     564:	3b 81       	ldd	r19, Y+3	; 0x03
     566:	82 0f       	add	r24, r18
     568:	93 1f       	adc	r25, r19
     56a:	2a ef       	ldi	r18, 0xFA	; 250
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	8f 5f       	subi	r24, 0xFF	; 255
     57a:	89 83       	std	Y+1, r24	; 0x01
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	28 2f       	mov	r18, r24
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	8f ee       	ldi	r24, 0xEF	; 239
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	fc 01       	movw	r30, r24
     588:	80 81       	ld	r24, Z
     58a:	88 2f       	mov	r24, r24
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	99 27       	eor	r25, r25
     592:	28 17       	cp	r18, r24
     594:	39 07       	cpc	r19, r25
     596:	14 f3       	brlt	.-60     	; 0x55c <can_get_data+0x14>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	1f 92       	push	r1
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     5b0:	88 ed       	ldi	r24, 0xD8	; 216
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
    Can_conf_bt();
     5ba:	82 ee       	ldi	r24, 0xE2	; 226
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	26 e0       	ldi	r18, 0x06	; 6
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
     5c4:	83 ee       	ldi	r24, 0xE3	; 227
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	24 e0       	ldi	r18, 0x04	; 4
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
     5ce:	84 ee       	ldi	r24, 0xE4	; 228
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	23 e1       	ldi	r18, 0x13	; 19
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
    return 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	1f 92       	push	r1
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <can_fixed_baudrate>
     5f4:	88 23       	and	r24, r24
     5f6:	11 f4       	brne	.+4      	; 0x5fc <can_init+0x1a>
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	0c c0       	rjmp	.+24     	; 0x614 <can_init+0x32>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     5fc:	0e 94 0f 02 	call	0x41e	; 0x41e <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     600:	88 ed       	ldi	r24, 0xD8	; 216
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	28 ed       	ldi	r18, 0xD8	; 216
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	f9 01       	movw	r30, r18
     60a:	20 81       	ld	r18, Z
     60c:	22 60       	ori	r18, 0x02	; 2
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
    return (1);
     612:	81 e0       	ldi	r24, 0x01	; 1
}
     614:	0f 90       	pop	r0
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	2a 97       	sbiw	r28, 0x0a	; 10
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	9a 87       	std	Y+10, r25	; 0x0a
     632:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     634:	89 85       	ldd	r24, Y+9	; 0x09
     636:	9a 85       	ldd	r25, Y+10	; 0x0a
     638:	fc 01       	movw	r30, r24
     63a:	81 81       	ldd	r24, Z+1	; 0x01
     63c:	8c 30       	cpi	r24, 0x0C	; 12
     63e:	39 f5       	brne	.+78     	; 0x68e <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     640:	89 85       	ldd	r24, Y+9	; 0x09
     642:	9a 85       	ldd	r25, Y+10	; 0x0a
     644:	fc 01       	movw	r30, r24
     646:	81 85       	ldd	r24, Z+9	; 0x09
     648:	80 36       	cpi	r24, 0x60	; 96
     64a:	d9 f4       	brne	.+54     	; 0x682 <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     64c:	8d ee       	ldi	r24, 0xED	; 237
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	29 85       	ldd	r18, Y+9	; 0x09
     652:	3a 85       	ldd	r19, Y+10	; 0x0a
     654:	f9 01       	movw	r30, r18
     656:	20 81       	ld	r18, Z
     658:	22 95       	swap	r18
     65a:	20 7f       	andi	r18, 0xF0	; 240
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
      Can_mob_abort();
     660:	8f ee       	ldi	r24, 0xEF	; 239
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	2f ee       	ldi	r18, 0xEF	; 239
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	f9 01       	movw	r30, r18
     66a:	20 81       	ld	r18, Z
     66c:	2f 73       	andi	r18, 0x3F	; 63
     66e:	fc 01       	movw	r30, r24
     670:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     672:	8e ee       	ldi	r24, 0xEE	; 238
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	fc 01       	movw	r30, r24
     678:	10 82       	st	Z, r1
      cmd->handle = 0;
     67a:	89 85       	ldd	r24, Y+9	; 0x09
     67c:	9a 85       	ldd	r25, Y+10	; 0x0a
     67e:	fc 01       	movw	r30, r24
     680:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     682:	89 85       	ldd	r24, Y+9	; 0x09
     684:	9a 85       	ldd	r25, Y+10	; 0x0a
     686:	fc 01       	movw	r30, r24
     688:	11 86       	std	Z+9, r1	; 0x09
     68a:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__stack+0x1235>
  }
  else
  {
    mob_handle = can_get_mob_free();
     68e:	0e 94 3d 02 	call	0x47a	; 0x47a <can_get_mob_free>
     692:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     694:	8c 81       	ldd	r24, Y+4	; 0x04
     696:	8f 3f       	cpi	r24, 0xFF	; 255
     698:	11 f4       	brne	.+4      	; 0x69e <can_cmd+0x82>
     69a:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <__stack+0x1227>
    {
      cmd->status = MOB_PENDING; 
     69e:	89 85       	ldd	r24, Y+9	; 0x09
     6a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a2:	20 e6       	ldi	r18, 0x60	; 96
     6a4:	fc 01       	movw	r30, r24
     6a6:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     6a8:	89 85       	ldd	r24, Y+9	; 0x09
     6aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ac:	2c 81       	ldd	r18, Y+4	; 0x04
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     6b2:	8d ee       	ldi	r24, 0xED	; 237
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	2c 81       	ldd	r18, Y+4	; 0x04
     6b8:	22 95       	swap	r18
     6ba:	20 7f       	andi	r18, 0xF0	; 240
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
      Can_clear_mob();
     6c0:	8e ee       	ldi	r24, 0xEE	; 238
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9b 83       	std	Y+3, r25	; 0x03
     6c6:	8a 83       	std	Y+2, r24	; 0x02
     6c8:	09 c0       	rjmp	.+18     	; 0x6dc <can_cmd+0xc0>
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	9b 81       	ldd	r25, Y+3	; 0x03
     6ce:	fc 01       	movw	r30, r24
     6d0:	10 82       	st	Z, r1
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	9b 81       	ldd	r25, Y+3	; 0x03
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	9b 83       	std	Y+3, r25	; 0x03
     6da:	8a 83       	std	Y+2, r24	; 0x02
     6dc:	8a 81       	ldd	r24, Y+2	; 0x02
     6de:	9b 81       	ldd	r25, Y+3	; 0x03
     6e0:	88 3f       	cpi	r24, 0xF8	; 248
     6e2:	91 05       	cpc	r25, r1
     6e4:	90 f3       	brcs	.-28     	; 0x6ca <can_cmd+0xae>
          
      switch (cmd->cmd)
     6e6:	89 85       	ldd	r24, Y+9	; 0x09
     6e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ea:	fc 01       	movw	r30, r24
     6ec:	81 81       	ldd	r24, Z+1	; 0x01
     6ee:	88 2f       	mov	r24, r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	09 2e       	mov	r0, r25
     6f4:	00 0c       	add	r0, r0
     6f6:	aa 0b       	sbc	r26, r26
     6f8:	bb 0b       	sbc	r27, r27
     6fa:	41 e0       	ldi	r20, 0x01	; 1
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	2a e0       	ldi	r18, 0x0A	; 10
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	84 1b       	sub	r24, r20
     704:	95 0b       	sbc	r25, r21
     706:	28 17       	cp	r18, r24
     708:	39 07       	cpc	r19, r25
     70a:	10 f4       	brcc	.+4      	; 0x710 <can_cmd+0xf4>
     70c:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__stack+0x121b>
     710:	82 5c       	subi	r24, 0xC2	; 194
     712:	9f 4f       	sbci	r25, 0xFF	; 255
     714:	fc 01       	movw	r30, r24
     716:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     71a:	89 85       	ldd	r24, Y+9	; 0x09
     71c:	9a 85       	ldd	r25, Y+10	; 0x0a
     71e:	fc 01       	movw	r30, r24
     720:	83 85       	ldd	r24, Z+11	; 0x0b
     722:	88 23       	and	r24, r24
     724:	09 f4       	brne	.+2      	; 0x728 <can_cmd+0x10c>
     726:	69 c0       	rjmp	.+210    	; 0x7fa <can_cmd+0x1de>
     728:	83 ef       	ldi	r24, 0xF3	; 243
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	29 85       	ldd	r18, Y+9	; 0x09
     72e:	3a 85       	ldd	r19, Y+10	; 0x0a
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	2d 5f       	subi	r18, 0xFD	; 253
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	f9 01       	movw	r30, r18
     73a:	20 81       	ld	r18, Z
     73c:	42 2f       	mov	r20, r18
     73e:	44 0f       	add	r20, r20
     740:	44 0f       	add	r20, r20
     742:	44 0f       	add	r20, r20
     744:	29 85       	ldd	r18, Y+9	; 0x09
     746:	3a 85       	ldd	r19, Y+10	; 0x0a
     748:	2e 5f       	subi	r18, 0xFE	; 254
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	2e 5f       	subi	r18, 0xFE	; 254
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	f9 01       	movw	r30, r18
     752:	20 81       	ld	r18, Z
     754:	22 95       	swap	r18
     756:	26 95       	lsr	r18
     758:	27 70       	andi	r18, 0x07	; 7
     75a:	24 0f       	add	r18, r20
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
     760:	82 ef       	ldi	r24, 0xF2	; 242
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	29 85       	ldd	r18, Y+9	; 0x09
     766:	3a 85       	ldd	r19, Y+10	; 0x0a
     768:	2e 5f       	subi	r18, 0xFE	; 254
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	2e 5f       	subi	r18, 0xFE	; 254
     76e:	3f 4f       	sbci	r19, 0xFF	; 255
     770:	f9 01       	movw	r30, r18
     772:	20 81       	ld	r18, Z
     774:	42 2f       	mov	r20, r18
     776:	44 0f       	add	r20, r20
     778:	44 0f       	add	r20, r20
     77a:	44 0f       	add	r20, r20
     77c:	29 85       	ldd	r18, Y+9	; 0x09
     77e:	3a 85       	ldd	r19, Y+10	; 0x0a
     780:	2e 5f       	subi	r18, 0xFE	; 254
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	2f 5f       	subi	r18, 0xFF	; 255
     786:	3f 4f       	sbci	r19, 0xFF	; 255
     788:	f9 01       	movw	r30, r18
     78a:	20 81       	ld	r18, Z
     78c:	22 95       	swap	r18
     78e:	26 95       	lsr	r18
     790:	27 70       	andi	r18, 0x07	; 7
     792:	24 0f       	add	r18, r20
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
     798:	81 ef       	ldi	r24, 0xF1	; 241
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	29 85       	ldd	r18, Y+9	; 0x09
     79e:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a0:	2e 5f       	subi	r18, 0xFE	; 254
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	42 2f       	mov	r20, r18
     7ae:	44 0f       	add	r20, r20
     7b0:	44 0f       	add	r20, r20
     7b2:	44 0f       	add	r20, r20
     7b4:	29 85       	ldd	r18, Y+9	; 0x09
     7b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b8:	2e 5f       	subi	r18, 0xFE	; 254
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	22 95       	swap	r18
     7c2:	26 95       	lsr	r18
     7c4:	27 70       	andi	r18, 0x07	; 7
     7c6:	24 0f       	add	r18, r20
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
     7cc:	80 ef       	ldi	r24, 0xF0	; 240
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	29 85       	ldd	r18, Y+9	; 0x09
     7d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     7d4:	2e 5f       	subi	r18, 0xFE	; 254
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	f9 01       	movw	r30, r18
     7da:	20 81       	ld	r18, Z
     7dc:	22 0f       	add	r18, r18
     7de:	22 0f       	add	r18, r18
     7e0:	22 0f       	add	r18, r18
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
     7e6:	8f ee       	ldi	r24, 0xEF	; 239
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	2f ee       	ldi	r18, 0xEF	; 239
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	20 81       	ld	r18, Z
     7f2:	20 61       	ori	r18, 0x10	; 16
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
     7f8:	30 c0       	rjmp	.+96     	; 0x85a <can_cmd+0x23e>
          else              { Can_set_std_id(cmd->id.std);}
     7fa:	83 ef       	ldi	r24, 0xF3	; 243
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	29 85       	ldd	r18, Y+9	; 0x09
     800:	3a 85       	ldd	r19, Y+10	; 0x0a
     802:	2e 5f       	subi	r18, 0xFE	; 254
     804:	3f 4f       	sbci	r19, 0xFF	; 255
     806:	2f 5f       	subi	r18, 0xFF	; 255
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	f9 01       	movw	r30, r18
     80c:	20 81       	ld	r18, Z
     80e:	42 2f       	mov	r20, r18
     810:	42 95       	swap	r20
     812:	44 0f       	add	r20, r20
     814:	40 7e       	andi	r20, 0xE0	; 224
     816:	29 85       	ldd	r18, Y+9	; 0x09
     818:	3a 85       	ldd	r19, Y+10	; 0x0a
     81a:	2e 5f       	subi	r18, 0xFE	; 254
     81c:	3f 4f       	sbci	r19, 0xFF	; 255
     81e:	f9 01       	movw	r30, r18
     820:	20 81       	ld	r18, Z
     822:	26 95       	lsr	r18
     824:	26 95       	lsr	r18
     826:	26 95       	lsr	r18
     828:	24 0f       	add	r18, r20
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
     82e:	82 ef       	ldi	r24, 0xF2	; 242
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	29 85       	ldd	r18, Y+9	; 0x09
     834:	3a 85       	ldd	r19, Y+10	; 0x0a
     836:	2e 5f       	subi	r18, 0xFE	; 254
     838:	3f 4f       	sbci	r19, 0xFF	; 255
     83a:	f9 01       	movw	r30, r18
     83c:	20 81       	ld	r18, Z
     83e:	22 95       	swap	r18
     840:	22 0f       	add	r18, r18
     842:	20 7e       	andi	r18, 0xE0	; 224
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
     848:	8f ee       	ldi	r24, 0xEF	; 239
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	2f ee       	ldi	r18, 0xEF	; 239
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	f9 01       	movw	r30, r18
     852:	20 81       	ld	r18, Z
     854:	2f 7e       	andi	r18, 0xEF	; 239
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     85a:	19 82       	std	Y+1, r1	; 0x01
     85c:	13 c0       	rjmp	.+38     	; 0x884 <can_cmd+0x268>
     85e:	8a ef       	ldi	r24, 0xFA	; 250
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	29 85       	ldd	r18, Y+9	; 0x09
     864:	3a 85       	ldd	r19, Y+10	; 0x0a
     866:	f9 01       	movw	r30, r18
     868:	47 81       	ldd	r20, Z+7	; 0x07
     86a:	50 85       	ldd	r21, Z+8	; 0x08
     86c:	29 81       	ldd	r18, Y+1	; 0x01
     86e:	22 2f       	mov	r18, r18
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	24 0f       	add	r18, r20
     874:	35 1f       	adc	r19, r21
     876:	f9 01       	movw	r30, r18
     878:	20 81       	ld	r18, Z
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	8f 5f       	subi	r24, 0xFF	; 255
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	89 85       	ldd	r24, Y+9	; 0x09
     886:	9a 85       	ldd	r25, Y+10	; 0x0a
     888:	fc 01       	movw	r30, r24
     88a:	96 81       	ldd	r25, Z+6	; 0x06
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	89 17       	cp	r24, r25
     890:	30 f3       	brcs	.-52     	; 0x85e <can_cmd+0x242>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     892:	89 85       	ldd	r24, Y+9	; 0x09
     894:	9a 85       	ldd	r25, Y+10	; 0x0a
     896:	fc 01       	movw	r30, r24
     898:	82 85       	ldd	r24, Z+10	; 0x0a
     89a:	88 23       	and	r24, r24
     89c:	51 f0       	breq	.+20     	; 0x8b2 <can_cmd+0x296>
     89e:	80 ef       	ldi	r24, 0xF0	; 240
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	20 ef       	ldi	r18, 0xF0	; 240
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	f9 01       	movw	r30, r18
     8a8:	20 81       	ld	r18, Z
     8aa:	24 60       	ori	r18, 0x04	; 4
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 83       	st	Z, r18
     8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <can_cmd+0x2a8>
            else Can_clear_rtr();    
     8b2:	80 ef       	ldi	r24, 0xF0	; 240
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	20 ef       	ldi	r18, 0xF0	; 240
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	2b 7f       	andi	r18, 0xFB	; 251
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     8c4:	8f ee       	ldi	r24, 0xEF	; 239
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	2f ee       	ldi	r18, 0xEF	; 239
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	f9 01       	movw	r30, r18
     8ce:	40 81       	ld	r20, Z
     8d0:	29 85       	ldd	r18, Y+9	; 0x09
     8d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d4:	f9 01       	movw	r30, r18
     8d6:	26 81       	ldd	r18, Z+6	; 0x06
     8d8:	24 2b       	or	r18, r20
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
          Can_config_tx();
     8de:	8f ee       	ldi	r24, 0xEF	; 239
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	2f ee       	ldi	r18, 0xEF	; 239
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	f9 01       	movw	r30, r18
     8e8:	20 81       	ld	r18, Z
     8ea:	2f 73       	andi	r18, 0x3F	; 63
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
     8f0:	8f ee       	ldi	r24, 0xEF	; 239
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	2f ee       	ldi	r18, 0xEF	; 239
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	20 81       	ld	r18, Z
     8fc:	20 64       	ori	r18, 0x40	; 64
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
          break;
     902:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     906:	89 85       	ldd	r24, Y+9	; 0x09
     908:	9a 85       	ldd	r25, Y+10	; 0x0a
     90a:	fc 01       	movw	r30, r24
     90c:	83 85       	ldd	r24, Z+11	; 0x0b
     90e:	88 23       	and	r24, r24
     910:	09 f4       	brne	.+2      	; 0x914 <__stack+0x15>
     912:	69 c0       	rjmp	.+210    	; 0x9e6 <__stack+0xe7>
     914:	83 ef       	ldi	r24, 0xF3	; 243
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	29 85       	ldd	r18, Y+9	; 0x09
     91a:	3a 85       	ldd	r19, Y+10	; 0x0a
     91c:	2e 5f       	subi	r18, 0xFE	; 254
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	2d 5f       	subi	r18, 0xFD	; 253
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	42 2f       	mov	r20, r18
     92a:	44 0f       	add	r20, r20
     92c:	44 0f       	add	r20, r20
     92e:	44 0f       	add	r20, r20
     930:	29 85       	ldd	r18, Y+9	; 0x09
     932:	3a 85       	ldd	r19, Y+10	; 0x0a
     934:	2e 5f       	subi	r18, 0xFE	; 254
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	2e 5f       	subi	r18, 0xFE	; 254
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	f9 01       	movw	r30, r18
     93e:	20 81       	ld	r18, Z
     940:	22 95       	swap	r18
     942:	26 95       	lsr	r18
     944:	27 70       	andi	r18, 0x07	; 7
     946:	24 0f       	add	r18, r20
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
     94c:	82 ef       	ldi	r24, 0xF2	; 242
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	29 85       	ldd	r18, Y+9	; 0x09
     952:	3a 85       	ldd	r19, Y+10	; 0x0a
     954:	2e 5f       	subi	r18, 0xFE	; 254
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	2e 5f       	subi	r18, 0xFE	; 254
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	42 2f       	mov	r20, r18
     962:	44 0f       	add	r20, r20
     964:	44 0f       	add	r20, r20
     966:	44 0f       	add	r20, r20
     968:	29 85       	ldd	r18, Y+9	; 0x09
     96a:	3a 85       	ldd	r19, Y+10	; 0x0a
     96c:	2e 5f       	subi	r18, 0xFE	; 254
     96e:	3f 4f       	sbci	r19, 0xFF	; 255
     970:	2f 5f       	subi	r18, 0xFF	; 255
     972:	3f 4f       	sbci	r19, 0xFF	; 255
     974:	f9 01       	movw	r30, r18
     976:	20 81       	ld	r18, Z
     978:	22 95       	swap	r18
     97a:	26 95       	lsr	r18
     97c:	27 70       	andi	r18, 0x07	; 7
     97e:	24 0f       	add	r18, r20
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
     984:	81 ef       	ldi	r24, 0xF1	; 241
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	29 85       	ldd	r18, Y+9	; 0x09
     98a:	3a 85       	ldd	r19, Y+10	; 0x0a
     98c:	2e 5f       	subi	r18, 0xFE	; 254
     98e:	3f 4f       	sbci	r19, 0xFF	; 255
     990:	2f 5f       	subi	r18, 0xFF	; 255
     992:	3f 4f       	sbci	r19, 0xFF	; 255
     994:	f9 01       	movw	r30, r18
     996:	20 81       	ld	r18, Z
     998:	42 2f       	mov	r20, r18
     99a:	44 0f       	add	r20, r20
     99c:	44 0f       	add	r20, r20
     99e:	44 0f       	add	r20, r20
     9a0:	29 85       	ldd	r18, Y+9	; 0x09
     9a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a4:	2e 5f       	subi	r18, 0xFE	; 254
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	f9 01       	movw	r30, r18
     9aa:	20 81       	ld	r18, Z
     9ac:	22 95       	swap	r18
     9ae:	26 95       	lsr	r18
     9b0:	27 70       	andi	r18, 0x07	; 7
     9b2:	24 0f       	add	r18, r20
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
     9b8:	80 ef       	ldi	r24, 0xF0	; 240
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	2e 5f       	subi	r18, 0xFE	; 254
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	f9 01       	movw	r30, r18
     9c6:	20 81       	ld	r18, Z
     9c8:	22 0f       	add	r18, r18
     9ca:	22 0f       	add	r18, r18
     9cc:	22 0f       	add	r18, r18
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
     9d2:	8f ee       	ldi	r24, 0xEF	; 239
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	2f ee       	ldi	r18, 0xEF	; 239
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	f9 01       	movw	r30, r18
     9dc:	20 81       	ld	r18, Z
     9de:	20 61       	ori	r18, 0x10	; 16
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
     9e4:	30 c0       	rjmp	.+96     	; 0xa46 <__stack+0x147>
          else              { Can_set_std_id(cmd->id.std);}
     9e6:	83 ef       	ldi	r24, 0xF3	; 243
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	29 85       	ldd	r18, Y+9	; 0x09
     9ec:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ee:	2e 5f       	subi	r18, 0xFE	; 254
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	2f 5f       	subi	r18, 0xFF	; 255
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	f9 01       	movw	r30, r18
     9f8:	20 81       	ld	r18, Z
     9fa:	42 2f       	mov	r20, r18
     9fc:	42 95       	swap	r20
     9fe:	44 0f       	add	r20, r20
     a00:	40 7e       	andi	r20, 0xE0	; 224
     a02:	29 85       	ldd	r18, Y+9	; 0x09
     a04:	3a 85       	ldd	r19, Y+10	; 0x0a
     a06:	2e 5f       	subi	r18, 0xFE	; 254
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	f9 01       	movw	r30, r18
     a0c:	20 81       	ld	r18, Z
     a0e:	26 95       	lsr	r18
     a10:	26 95       	lsr	r18
     a12:	26 95       	lsr	r18
     a14:	24 0f       	add	r18, r20
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18
     a1a:	82 ef       	ldi	r24, 0xF2	; 242
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	29 85       	ldd	r18, Y+9	; 0x09
     a20:	3a 85       	ldd	r19, Y+10	; 0x0a
     a22:	2e 5f       	subi	r18, 0xFE	; 254
     a24:	3f 4f       	sbci	r19, 0xFF	; 255
     a26:	f9 01       	movw	r30, r18
     a28:	20 81       	ld	r18, Z
     a2a:	22 95       	swap	r18
     a2c:	22 0f       	add	r18, r18
     a2e:	20 7e       	andi	r18, 0xE0	; 224
     a30:	fc 01       	movw	r30, r24
     a32:	20 83       	st	Z, r18
     a34:	8f ee       	ldi	r24, 0xEF	; 239
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	2f ee       	ldi	r18, 0xEF	; 239
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	f9 01       	movw	r30, r18
     a3e:	20 81       	ld	r18, Z
     a40:	2f 7e       	andi	r18, 0xEF	; 239
     a42:	fc 01       	movw	r30, r24
     a44:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     a46:	19 82       	std	Y+1, r1	; 0x01
     a48:	13 c0       	rjmp	.+38     	; 0xa70 <__stack+0x171>
     a4a:	8a ef       	ldi	r24, 0xFA	; 250
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	29 85       	ldd	r18, Y+9	; 0x09
     a50:	3a 85       	ldd	r19, Y+10	; 0x0a
     a52:	f9 01       	movw	r30, r18
     a54:	47 81       	ldd	r20, Z+7	; 0x07
     a56:	50 85       	ldd	r21, Z+8	; 0x08
     a58:	29 81       	ldd	r18, Y+1	; 0x01
     a5a:	22 2f       	mov	r18, r18
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	24 0f       	add	r18, r20
     a60:	35 1f       	adc	r19, r21
     a62:	f9 01       	movw	r30, r18
     a64:	20 81       	ld	r18, Z
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	8f 5f       	subi	r24, 0xFF	; 255
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	9a 85       	ldd	r25, Y+10	; 0x0a
     a74:	fc 01       	movw	r30, r24
     a76:	96 81       	ldd	r25, Z+6	; 0x06
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	89 17       	cp	r24, r25
     a7c:	30 f3       	brcs	.-52     	; 0xa4a <__stack+0x14b>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     a7e:	89 85       	ldd	r24, Y+9	; 0x09
     a80:	9a 85       	ldd	r25, Y+10	; 0x0a
     a82:	fc 01       	movw	r30, r24
     a84:	12 86       	std	Z+10, r1	; 0x0a
     a86:	80 ef       	ldi	r24, 0xF0	; 240
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	20 ef       	ldi	r18, 0xF0	; 240
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	f9 01       	movw	r30, r18
     a90:	20 81       	ld	r18, Z
     a92:	2b 7f       	andi	r18, 0xFB	; 251
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a98:	8f ee       	ldi	r24, 0xEF	; 239
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	2f ee       	ldi	r18, 0xEF	; 239
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	f9 01       	movw	r30, r18
     aa2:	40 81       	ld	r20, Z
     aa4:	29 85       	ldd	r18, Y+9	; 0x09
     aa6:	3a 85       	ldd	r19, Y+10	; 0x0a
     aa8:	f9 01       	movw	r30, r18
     aaa:	26 81       	ldd	r18, Z+6	; 0x06
     aac:	24 2b       	or	r18, r20
     aae:	fc 01       	movw	r30, r24
     ab0:	20 83       	st	Z, r18
          Can_config_tx();
     ab2:	8f ee       	ldi	r24, 0xEF	; 239
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	2f ee       	ldi	r18, 0xEF	; 239
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	f9 01       	movw	r30, r18
     abc:	20 81       	ld	r18, Z
     abe:	2f 73       	andi	r18, 0x3F	; 63
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18
     ac4:	8f ee       	ldi	r24, 0xEF	; 239
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	2f ee       	ldi	r18, 0xEF	; 239
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	f9 01       	movw	r30, r18
     ace:	20 81       	ld	r18, Z
     ad0:	20 64       	ori	r18, 0x40	; 64
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
          break;
     ad6:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ada:	89 85       	ldd	r24, Y+9	; 0x09
     adc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ade:	fc 01       	movw	r30, r24
     ae0:	83 85       	ldd	r24, Z+11	; 0x0b
     ae2:	88 23       	and	r24, r24
     ae4:	09 f4       	brne	.+2      	; 0xae8 <__stack+0x1e9>
     ae6:	69 c0       	rjmp	.+210    	; 0xbba <__stack+0x2bb>
     ae8:	83 ef       	ldi	r24, 0xF3	; 243
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	29 85       	ldd	r18, Y+9	; 0x09
     aee:	3a 85       	ldd	r19, Y+10	; 0x0a
     af0:	2e 5f       	subi	r18, 0xFE	; 254
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	2d 5f       	subi	r18, 0xFD	; 253
     af6:	3f 4f       	sbci	r19, 0xFF	; 255
     af8:	f9 01       	movw	r30, r18
     afa:	20 81       	ld	r18, Z
     afc:	42 2f       	mov	r20, r18
     afe:	44 0f       	add	r20, r20
     b00:	44 0f       	add	r20, r20
     b02:	44 0f       	add	r20, r20
     b04:	29 85       	ldd	r18, Y+9	; 0x09
     b06:	3a 85       	ldd	r19, Y+10	; 0x0a
     b08:	2e 5f       	subi	r18, 0xFE	; 254
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	2e 5f       	subi	r18, 0xFE	; 254
     b0e:	3f 4f       	sbci	r19, 0xFF	; 255
     b10:	f9 01       	movw	r30, r18
     b12:	20 81       	ld	r18, Z
     b14:	22 95       	swap	r18
     b16:	26 95       	lsr	r18
     b18:	27 70       	andi	r18, 0x07	; 7
     b1a:	24 0f       	add	r18, r20
     b1c:	fc 01       	movw	r30, r24
     b1e:	20 83       	st	Z, r18
     b20:	82 ef       	ldi	r24, 0xF2	; 242
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	29 85       	ldd	r18, Y+9	; 0x09
     b26:	3a 85       	ldd	r19, Y+10	; 0x0a
     b28:	2e 5f       	subi	r18, 0xFE	; 254
     b2a:	3f 4f       	sbci	r19, 0xFF	; 255
     b2c:	2e 5f       	subi	r18, 0xFE	; 254
     b2e:	3f 4f       	sbci	r19, 0xFF	; 255
     b30:	f9 01       	movw	r30, r18
     b32:	20 81       	ld	r18, Z
     b34:	42 2f       	mov	r20, r18
     b36:	44 0f       	add	r20, r20
     b38:	44 0f       	add	r20, r20
     b3a:	44 0f       	add	r20, r20
     b3c:	29 85       	ldd	r18, Y+9	; 0x09
     b3e:	3a 85       	ldd	r19, Y+10	; 0x0a
     b40:	2e 5f       	subi	r18, 0xFE	; 254
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	2f 5f       	subi	r18, 0xFF	; 255
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	f9 01       	movw	r30, r18
     b4a:	20 81       	ld	r18, Z
     b4c:	22 95       	swap	r18
     b4e:	26 95       	lsr	r18
     b50:	27 70       	andi	r18, 0x07	; 7
     b52:	24 0f       	add	r18, r20
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
     b58:	81 ef       	ldi	r24, 0xF1	; 241
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	29 85       	ldd	r18, Y+9	; 0x09
     b5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     b60:	2e 5f       	subi	r18, 0xFE	; 254
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	2f 5f       	subi	r18, 0xFF	; 255
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	f9 01       	movw	r30, r18
     b6a:	20 81       	ld	r18, Z
     b6c:	42 2f       	mov	r20, r18
     b6e:	44 0f       	add	r20, r20
     b70:	44 0f       	add	r20, r20
     b72:	44 0f       	add	r20, r20
     b74:	29 85       	ldd	r18, Y+9	; 0x09
     b76:	3a 85       	ldd	r19, Y+10	; 0x0a
     b78:	2e 5f       	subi	r18, 0xFE	; 254
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	f9 01       	movw	r30, r18
     b7e:	20 81       	ld	r18, Z
     b80:	22 95       	swap	r18
     b82:	26 95       	lsr	r18
     b84:	27 70       	andi	r18, 0x07	; 7
     b86:	24 0f       	add	r18, r20
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
     b8c:	80 ef       	ldi	r24, 0xF0	; 240
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	29 85       	ldd	r18, Y+9	; 0x09
     b92:	3a 85       	ldd	r19, Y+10	; 0x0a
     b94:	2e 5f       	subi	r18, 0xFE	; 254
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	f9 01       	movw	r30, r18
     b9a:	20 81       	ld	r18, Z
     b9c:	22 0f       	add	r18, r18
     b9e:	22 0f       	add	r18, r18
     ba0:	22 0f       	add	r18, r18
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
     ba6:	8f ee       	ldi	r24, 0xEF	; 239
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	2f ee       	ldi	r18, 0xEF	; 239
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	f9 01       	movw	r30, r18
     bb0:	20 81       	ld	r18, Z
     bb2:	20 61       	ori	r18, 0x10	; 16
     bb4:	fc 01       	movw	r30, r24
     bb6:	20 83       	st	Z, r18
     bb8:	30 c0       	rjmp	.+96     	; 0xc1a <__stack+0x31b>
          else              { Can_set_std_id(cmd->id.std);}
     bba:	83 ef       	ldi	r24, 0xF3	; 243
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	29 85       	ldd	r18, Y+9	; 0x09
     bc0:	3a 85       	ldd	r19, Y+10	; 0x0a
     bc2:	2e 5f       	subi	r18, 0xFE	; 254
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	2f 5f       	subi	r18, 0xFF	; 255
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	f9 01       	movw	r30, r18
     bcc:	20 81       	ld	r18, Z
     bce:	42 2f       	mov	r20, r18
     bd0:	42 95       	swap	r20
     bd2:	44 0f       	add	r20, r20
     bd4:	40 7e       	andi	r20, 0xE0	; 224
     bd6:	29 85       	ldd	r18, Y+9	; 0x09
     bd8:	3a 85       	ldd	r19, Y+10	; 0x0a
     bda:	2e 5f       	subi	r18, 0xFE	; 254
     bdc:	3f 4f       	sbci	r19, 0xFF	; 255
     bde:	f9 01       	movw	r30, r18
     be0:	20 81       	ld	r18, Z
     be2:	26 95       	lsr	r18
     be4:	26 95       	lsr	r18
     be6:	26 95       	lsr	r18
     be8:	24 0f       	add	r18, r20
     bea:	fc 01       	movw	r30, r24
     bec:	20 83       	st	Z, r18
     bee:	82 ef       	ldi	r24, 0xF2	; 242
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	29 85       	ldd	r18, Y+9	; 0x09
     bf4:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf6:	2e 5f       	subi	r18, 0xFE	; 254
     bf8:	3f 4f       	sbci	r19, 0xFF	; 255
     bfa:	f9 01       	movw	r30, r18
     bfc:	20 81       	ld	r18, Z
     bfe:	22 95       	swap	r18
     c00:	22 0f       	add	r18, r18
     c02:	20 7e       	andi	r18, 0xE0	; 224
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
     c08:	8f ee       	ldi	r24, 0xEF	; 239
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	2f ee       	ldi	r18, 0xEF	; 239
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	f9 01       	movw	r30, r18
     c12:	20 81       	ld	r18, Z
     c14:	2f 7e       	andi	r18, 0xEF	; 239
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	21 e0       	ldi	r18, 0x01	; 1
     c20:	fc 01       	movw	r30, r24
     c22:	22 87       	std	Z+10, r18	; 0x0a
     c24:	80 ef       	ldi	r24, 0xF0	; 240
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	20 ef       	ldi	r18, 0xF0	; 240
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	f9 01       	movw	r30, r18
     c2e:	20 81       	ld	r18, Z
     c30:	24 60       	ori	r18, 0x04	; 4
     c32:	fc 01       	movw	r30, r24
     c34:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c36:	8f ee       	ldi	r24, 0xEF	; 239
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	2f ee       	ldi	r18, 0xEF	; 239
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	f9 01       	movw	r30, r18
     c40:	40 81       	ld	r20, Z
     c42:	29 85       	ldd	r18, Y+9	; 0x09
     c44:	3a 85       	ldd	r19, Y+10	; 0x0a
     c46:	f9 01       	movw	r30, r18
     c48:	26 81       	ldd	r18, Z+6	; 0x06
     c4a:	24 2b       	or	r18, r20
     c4c:	fc 01       	movw	r30, r24
     c4e:	20 83       	st	Z, r18
          Can_config_tx();
     c50:	8f ee       	ldi	r24, 0xEF	; 239
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	2f ee       	ldi	r18, 0xEF	; 239
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	f9 01       	movw	r30, r18
     c5a:	20 81       	ld	r18, Z
     c5c:	2f 73       	andi	r18, 0x3F	; 63
     c5e:	fc 01       	movw	r30, r24
     c60:	20 83       	st	Z, r18
     c62:	8f ee       	ldi	r24, 0xEF	; 239
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	2f ee       	ldi	r18, 0xEF	; 239
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	20 81       	ld	r18, Z
     c6e:	20 64       	ori	r18, 0x40	; 64
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
          break;
     c74:	57 c7       	rjmp	.+3758   	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     c76:	1d 82       	std	Y+5, r1	; 0x05
     c78:	1e 82       	std	Y+6, r1	; 0x06
     c7a:	1f 82       	std	Y+7, r1	; 0x07
     c7c:	18 86       	std	Y+8, r1	; 0x08
     c7e:	27 ef       	ldi	r18, 0xF7	; 247
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	ce 01       	movw	r24, r28
     c84:	05 96       	adiw	r24, 0x05	; 5
     c86:	03 96       	adiw	r24, 0x03	; 3
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	48 2f       	mov	r20, r24
     c8e:	44 0f       	add	r20, r20
     c90:	44 0f       	add	r20, r20
     c92:	44 0f       	add	r20, r20
     c94:	ce 01       	movw	r24, r28
     c96:	05 96       	adiw	r24, 0x05	; 5
     c98:	02 96       	adiw	r24, 0x02	; 2
     c9a:	fc 01       	movw	r30, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	82 95       	swap	r24
     ca0:	86 95       	lsr	r24
     ca2:	87 70       	andi	r24, 0x07	; 7
     ca4:	84 0f       	add	r24, r20
     ca6:	f9 01       	movw	r30, r18
     ca8:	80 83       	st	Z, r24
     caa:	26 ef       	ldi	r18, 0xF6	; 246
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	ce 01       	movw	r24, r28
     cb0:	05 96       	adiw	r24, 0x05	; 5
     cb2:	02 96       	adiw	r24, 0x02	; 2
     cb4:	fc 01       	movw	r30, r24
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	44 0f       	add	r20, r20
     cbc:	44 0f       	add	r20, r20
     cbe:	44 0f       	add	r20, r20
     cc0:	ce 01       	movw	r24, r28
     cc2:	05 96       	adiw	r24, 0x05	; 5
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	82 95       	swap	r24
     ccc:	86 95       	lsr	r24
     cce:	87 70       	andi	r24, 0x07	; 7
     cd0:	84 0f       	add	r24, r20
     cd2:	f9 01       	movw	r30, r18
     cd4:	80 83       	st	Z, r24
     cd6:	25 ef       	ldi	r18, 0xF5	; 245
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	ce 01       	movw	r24, r28
     cdc:	05 96       	adiw	r24, 0x05	; 5
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	fc 01       	movw	r30, r24
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	44 0f       	add	r20, r20
     ce8:	44 0f       	add	r20, r20
     cea:	44 0f       	add	r20, r20
     cec:	ce 01       	movw	r24, r28
     cee:	05 96       	adiw	r24, 0x05	; 5
     cf0:	fc 01       	movw	r30, r24
     cf2:	80 81       	ld	r24, Z
     cf4:	82 95       	swap	r24
     cf6:	86 95       	lsr	r24
     cf8:	87 70       	andi	r24, 0x07	; 7
     cfa:	84 0f       	add	r24, r20
     cfc:	f9 01       	movw	r30, r18
     cfe:	80 83       	st	Z, r24
     d00:	84 ef       	ldi	r24, 0xF4	; 244
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9e 01       	movw	r18, r28
     d06:	2b 5f       	subi	r18, 0xFB	; 251
     d08:	3f 4f       	sbci	r19, 0xFF	; 255
     d0a:	f9 01       	movw	r30, r18
     d0c:	20 81       	ld	r18, Z
     d0e:	22 0f       	add	r18, r18
     d10:	22 0f       	add	r18, r18
     d12:	22 0f       	add	r18, r18
     d14:	fc 01       	movw	r30, r24
     d16:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d18:	8f ee       	ldi	r24, 0xEF	; 239
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	2f ee       	ldi	r18, 0xEF	; 239
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	f9 01       	movw	r30, r18
     d22:	40 81       	ld	r20, Z
     d24:	29 85       	ldd	r18, Y+9	; 0x09
     d26:	3a 85       	ldd	r19, Y+10	; 0x0a
     d28:	f9 01       	movw	r30, r18
     d2a:	26 81       	ldd	r18, Z+6	; 0x06
     d2c:	24 2b       	or	r18, r20
     d2e:	fc 01       	movw	r30, r24
     d30:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     d32:	84 ef       	ldi	r24, 0xF4	; 244
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	24 ef       	ldi	r18, 0xF4	; 244
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	f9 01       	movw	r30, r18
     d3c:	20 81       	ld	r18, Z
     d3e:	2b 7f       	andi	r18, 0xFB	; 251
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d44:	84 ef       	ldi	r24, 0xF4	; 244
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	24 ef       	ldi	r18, 0xF4	; 244
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	f9 01       	movw	r30, r18
     d4e:	20 81       	ld	r18, Z
     d50:	2e 7f       	andi	r18, 0xFE	; 254
     d52:	fc 01       	movw	r30, r24
     d54:	20 83       	st	Z, r18
          Can_config_rx();       
     d56:	8f ee       	ldi	r24, 0xEF	; 239
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	2f ee       	ldi	r18, 0xEF	; 239
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	f9 01       	movw	r30, r18
     d60:	20 81       	ld	r18, Z
     d62:	2f 73       	andi	r18, 0x3F	; 63
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
     d68:	8f ee       	ldi	r24, 0xEF	; 239
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	2f ee       	ldi	r18, 0xEF	; 239
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	f9 01       	movw	r30, r18
     d72:	20 81       	ld	r18, Z
     d74:	20 68       	ori	r18, 0x80	; 128
     d76:	fc 01       	movw	r30, r24
     d78:	20 83       	st	Z, r18
          break;
     d7a:	d4 c6       	rjmp	.+3496   	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     d7c:	1d 82       	std	Y+5, r1	; 0x05
     d7e:	1e 82       	std	Y+6, r1	; 0x06
     d80:	1f 82       	std	Y+7, r1	; 0x07
     d82:	18 86       	std	Y+8, r1	; 0x08
     d84:	27 ef       	ldi	r18, 0xF7	; 247
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	ce 01       	movw	r24, r28
     d8a:	05 96       	adiw	r24, 0x05	; 5
     d8c:	03 96       	adiw	r24, 0x03	; 3
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	44 0f       	add	r20, r20
     d96:	44 0f       	add	r20, r20
     d98:	44 0f       	add	r20, r20
     d9a:	ce 01       	movw	r24, r28
     d9c:	05 96       	adiw	r24, 0x05	; 5
     d9e:	02 96       	adiw	r24, 0x02	; 2
     da0:	fc 01       	movw	r30, r24
     da2:	80 81       	ld	r24, Z
     da4:	82 95       	swap	r24
     da6:	86 95       	lsr	r24
     da8:	87 70       	andi	r24, 0x07	; 7
     daa:	84 0f       	add	r24, r20
     dac:	f9 01       	movw	r30, r18
     dae:	80 83       	st	Z, r24
     db0:	26 ef       	ldi	r18, 0xF6	; 246
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	ce 01       	movw	r24, r28
     db6:	05 96       	adiw	r24, 0x05	; 5
     db8:	02 96       	adiw	r24, 0x02	; 2
     dba:	fc 01       	movw	r30, r24
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	44 0f       	add	r20, r20
     dc2:	44 0f       	add	r20, r20
     dc4:	44 0f       	add	r20, r20
     dc6:	ce 01       	movw	r24, r28
     dc8:	05 96       	adiw	r24, 0x05	; 5
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	fc 01       	movw	r30, r24
     dce:	80 81       	ld	r24, Z
     dd0:	82 95       	swap	r24
     dd2:	86 95       	lsr	r24
     dd4:	87 70       	andi	r24, 0x07	; 7
     dd6:	84 0f       	add	r24, r20
     dd8:	f9 01       	movw	r30, r18
     dda:	80 83       	st	Z, r24
     ddc:	25 ef       	ldi	r18, 0xF5	; 245
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	ce 01       	movw	r24, r28
     de2:	05 96       	adiw	r24, 0x05	; 5
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	fc 01       	movw	r30, r24
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	44 0f       	add	r20, r20
     dee:	44 0f       	add	r20, r20
     df0:	44 0f       	add	r20, r20
     df2:	ce 01       	movw	r24, r28
     df4:	05 96       	adiw	r24, 0x05	; 5
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	82 95       	swap	r24
     dfc:	86 95       	lsr	r24
     dfe:	87 70       	andi	r24, 0x07	; 7
     e00:	84 0f       	add	r24, r20
     e02:	f9 01       	movw	r30, r18
     e04:	80 83       	st	Z, r24
     e06:	84 ef       	ldi	r24, 0xF4	; 244
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9e 01       	movw	r18, r28
     e0c:	2b 5f       	subi	r18, 0xFB	; 251
     e0e:	3f 4f       	sbci	r19, 0xFF	; 255
     e10:	f9 01       	movw	r30, r18
     e12:	20 81       	ld	r18, Z
     e14:	22 0f       	add	r18, r18
     e16:	22 0f       	add	r18, r18
     e18:	22 0f       	add	r18, r18
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e1e:	8f ee       	ldi	r24, 0xEF	; 239
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	2f ee       	ldi	r18, 0xEF	; 239
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	f9 01       	movw	r30, r18
     e28:	40 81       	ld	r20, Z
     e2a:	29 85       	ldd	r18, Y+9	; 0x09
     e2c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e2e:	f9 01       	movw	r30, r18
     e30:	26 81       	ldd	r18, Z+6	; 0x06
     e32:	24 2b       	or	r18, r20
     e34:	fc 01       	movw	r30, r24
     e36:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	fc 01       	movw	r30, r24
     e3e:	12 86       	std	Z+10, r1	; 0x0a
     e40:	84 ef       	ldi	r24, 0xF4	; 244
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	24 ef       	ldi	r18, 0xF4	; 244
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	f9 01       	movw	r30, r18
     e4a:	20 81       	ld	r18, Z
     e4c:	24 60       	ori	r18, 0x04	; 4
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
     e52:	80 ef       	ldi	r24, 0xF0	; 240
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	20 ef       	ldi	r18, 0xF0	; 240
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	f9 01       	movw	r30, r18
     e5c:	20 81       	ld	r18, Z
     e5e:	2b 7f       	andi	r18, 0xFB	; 251
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
          Can_clear_idemsk();
     e64:	84 ef       	ldi	r24, 0xF4	; 244
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	24 ef       	ldi	r18, 0xF4	; 244
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	f9 01       	movw	r30, r18
     e6e:	20 81       	ld	r18, Z
     e70:	2e 7f       	andi	r18, 0xFE	; 254
     e72:	fc 01       	movw	r30, r24
     e74:	20 83       	st	Z, r18
          Can_config_rx();       
     e76:	8f ee       	ldi	r24, 0xEF	; 239
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	2f ee       	ldi	r18, 0xEF	; 239
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	f9 01       	movw	r30, r18
     e80:	20 81       	ld	r18, Z
     e82:	2f 73       	andi	r18, 0x3F	; 63
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
     e88:	8f ee       	ldi	r24, 0xEF	; 239
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	2f ee       	ldi	r18, 0xEF	; 239
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	f9 01       	movw	r30, r18
     e92:	20 81       	ld	r18, Z
     e94:	20 68       	ori	r18, 0x80	; 128
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
          break;
     e9a:	44 c6       	rjmp	.+3208   	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     e9c:	1d 82       	std	Y+5, r1	; 0x05
     e9e:	1e 82       	std	Y+6, r1	; 0x06
     ea0:	1f 82       	std	Y+7, r1	; 0x07
     ea2:	18 86       	std	Y+8, r1	; 0x08
     ea4:	27 ef       	ldi	r18, 0xF7	; 247
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	ce 01       	movw	r24, r28
     eaa:	05 96       	adiw	r24, 0x05	; 5
     eac:	03 96       	adiw	r24, 0x03	; 3
     eae:	fc 01       	movw	r30, r24
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	44 0f       	add	r20, r20
     eb6:	44 0f       	add	r20, r20
     eb8:	44 0f       	add	r20, r20
     eba:	ce 01       	movw	r24, r28
     ebc:	05 96       	adiw	r24, 0x05	; 5
     ebe:	02 96       	adiw	r24, 0x02	; 2
     ec0:	fc 01       	movw	r30, r24
     ec2:	80 81       	ld	r24, Z
     ec4:	82 95       	swap	r24
     ec6:	86 95       	lsr	r24
     ec8:	87 70       	andi	r24, 0x07	; 7
     eca:	84 0f       	add	r24, r20
     ecc:	f9 01       	movw	r30, r18
     ece:	80 83       	st	Z, r24
     ed0:	26 ef       	ldi	r18, 0xF6	; 246
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	ce 01       	movw	r24, r28
     ed6:	05 96       	adiw	r24, 0x05	; 5
     ed8:	02 96       	adiw	r24, 0x02	; 2
     eda:	fc 01       	movw	r30, r24
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	44 0f       	add	r20, r20
     ee2:	44 0f       	add	r20, r20
     ee4:	44 0f       	add	r20, r20
     ee6:	ce 01       	movw	r24, r28
     ee8:	05 96       	adiw	r24, 0x05	; 5
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	fc 01       	movw	r30, r24
     eee:	80 81       	ld	r24, Z
     ef0:	82 95       	swap	r24
     ef2:	86 95       	lsr	r24
     ef4:	87 70       	andi	r24, 0x07	; 7
     ef6:	84 0f       	add	r24, r20
     ef8:	f9 01       	movw	r30, r18
     efa:	80 83       	st	Z, r24
     efc:	25 ef       	ldi	r18, 0xF5	; 245
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	ce 01       	movw	r24, r28
     f02:	05 96       	adiw	r24, 0x05	; 5
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	fc 01       	movw	r30, r24
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	44 0f       	add	r20, r20
     f0e:	44 0f       	add	r20, r20
     f10:	44 0f       	add	r20, r20
     f12:	ce 01       	movw	r24, r28
     f14:	05 96       	adiw	r24, 0x05	; 5
     f16:	fc 01       	movw	r30, r24
     f18:	80 81       	ld	r24, Z
     f1a:	82 95       	swap	r24
     f1c:	86 95       	lsr	r24
     f1e:	87 70       	andi	r24, 0x07	; 7
     f20:	84 0f       	add	r24, r20
     f22:	f9 01       	movw	r30, r18
     f24:	80 83       	st	Z, r24
     f26:	84 ef       	ldi	r24, 0xF4	; 244
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	9e 01       	movw	r18, r28
     f2c:	2b 5f       	subi	r18, 0xFB	; 251
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	f9 01       	movw	r30, r18
     f32:	20 81       	ld	r18, Z
     f34:	22 0f       	add	r18, r18
     f36:	22 0f       	add	r18, r18
     f38:	22 0f       	add	r18, r18
     f3a:	fc 01       	movw	r30, r24
     f3c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     f3e:	8f ee       	ldi	r24, 0xEF	; 239
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	2f ee       	ldi	r18, 0xEF	; 239
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	f9 01       	movw	r30, r18
     f48:	40 81       	ld	r20, Z
     f4a:	29 85       	ldd	r18, Y+9	; 0x09
     f4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f4e:	f9 01       	movw	r30, r18
     f50:	26 81       	ldd	r18, Z+6	; 0x06
     f52:	24 2b       	or	r18, r20
     f54:	fc 01       	movw	r30, r24
     f56:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5c:	21 e0       	ldi	r18, 0x01	; 1
     f5e:	fc 01       	movw	r30, r24
     f60:	22 87       	std	Z+10, r18	; 0x0a
     f62:	84 ef       	ldi	r24, 0xF4	; 244
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	24 ef       	ldi	r18, 0xF4	; 244
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	f9 01       	movw	r30, r18
     f6c:	20 81       	ld	r18, Z
     f6e:	24 60       	ori	r18, 0x04	; 4
     f70:	fc 01       	movw	r30, r24
     f72:	20 83       	st	Z, r18
     f74:	80 ef       	ldi	r24, 0xF0	; 240
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	20 ef       	ldi	r18, 0xF0	; 240
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	f9 01       	movw	r30, r18
     f7e:	20 81       	ld	r18, Z
     f80:	24 60       	ori	r18, 0x04	; 4
     f82:	fc 01       	movw	r30, r24
     f84:	20 83       	st	Z, r18
          Can_clear_rplv();
     f86:	8f ee       	ldi	r24, 0xEF	; 239
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	2f ee       	ldi	r18, 0xEF	; 239
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	f9 01       	movw	r30, r18
     f90:	20 81       	ld	r18, Z
     f92:	2f 7d       	andi	r18, 0xDF	; 223
     f94:	fc 01       	movw	r30, r24
     f96:	20 83       	st	Z, r18
          Can_clear_idemsk();
     f98:	84 ef       	ldi	r24, 0xF4	; 244
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	24 ef       	ldi	r18, 0xF4	; 244
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	f9 01       	movw	r30, r18
     fa2:	20 81       	ld	r18, Z
     fa4:	2e 7f       	andi	r18, 0xFE	; 254
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18
          Can_config_rx();       
     faa:	8f ee       	ldi	r24, 0xEF	; 239
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	2f ee       	ldi	r18, 0xEF	; 239
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	f9 01       	movw	r30, r18
     fb4:	20 81       	ld	r18, Z
     fb6:	2f 73       	andi	r18, 0x3F	; 63
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18
     fbc:	8f ee       	ldi	r24, 0xEF	; 239
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	2f ee       	ldi	r18, 0xEF	; 239
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	f9 01       	movw	r30, r18
     fc6:	20 81       	ld	r18, Z
     fc8:	20 68       	ori	r18, 0x80	; 128
     fca:	fc 01       	movw	r30, r24
     fcc:	20 83       	st	Z, r18
          break;
     fce:	aa c5       	rjmp	.+2900   	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	fc 01       	movw	r30, r24
     fd6:	83 85       	ldd	r24, Z+11	; 0x0b
     fd8:	88 23       	and	r24, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <__stack+0x6df>
     fdc:	69 c0       	rjmp	.+210    	; 0x10b0 <__stack+0x7b1>
     fde:	83 ef       	ldi	r24, 0xF3	; 243
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	29 85       	ldd	r18, Y+9	; 0x09
     fe4:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe6:	2e 5f       	subi	r18, 0xFE	; 254
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	2d 5f       	subi	r18, 0xFD	; 253
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	42 2f       	mov	r20, r18
     ff4:	44 0f       	add	r20, r20
     ff6:	44 0f       	add	r20, r20
     ff8:	44 0f       	add	r20, r20
     ffa:	29 85       	ldd	r18, Y+9	; 0x09
     ffc:	3a 85       	ldd	r19, Y+10	; 0x0a
     ffe:	2e 5f       	subi	r18, 0xFE	; 254
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	2e 5f       	subi	r18, 0xFE	; 254
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	f9 01       	movw	r30, r18
    1008:	20 81       	ld	r18, Z
    100a:	22 95       	swap	r18
    100c:	26 95       	lsr	r18
    100e:	27 70       	andi	r18, 0x07	; 7
    1010:	24 0f       	add	r18, r20
    1012:	fc 01       	movw	r30, r24
    1014:	20 83       	st	Z, r18
    1016:	82 ef       	ldi	r24, 0xF2	; 242
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	29 85       	ldd	r18, Y+9	; 0x09
    101c:	3a 85       	ldd	r19, Y+10	; 0x0a
    101e:	2e 5f       	subi	r18, 0xFE	; 254
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
    1022:	2e 5f       	subi	r18, 0xFE	; 254
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	f9 01       	movw	r30, r18
    1028:	20 81       	ld	r18, Z
    102a:	42 2f       	mov	r20, r18
    102c:	44 0f       	add	r20, r20
    102e:	44 0f       	add	r20, r20
    1030:	44 0f       	add	r20, r20
    1032:	29 85       	ldd	r18, Y+9	; 0x09
    1034:	3a 85       	ldd	r19, Y+10	; 0x0a
    1036:	2e 5f       	subi	r18, 0xFE	; 254
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	2f 5f       	subi	r18, 0xFF	; 255
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	f9 01       	movw	r30, r18
    1040:	20 81       	ld	r18, Z
    1042:	22 95       	swap	r18
    1044:	26 95       	lsr	r18
    1046:	27 70       	andi	r18, 0x07	; 7
    1048:	24 0f       	add	r18, r20
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
    104e:	81 ef       	ldi	r24, 0xF1	; 241
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	29 85       	ldd	r18, Y+9	; 0x09
    1054:	3a 85       	ldd	r19, Y+10	; 0x0a
    1056:	2e 5f       	subi	r18, 0xFE	; 254
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	f9 01       	movw	r30, r18
    1060:	20 81       	ld	r18, Z
    1062:	42 2f       	mov	r20, r18
    1064:	44 0f       	add	r20, r20
    1066:	44 0f       	add	r20, r20
    1068:	44 0f       	add	r20, r20
    106a:	29 85       	ldd	r18, Y+9	; 0x09
    106c:	3a 85       	ldd	r19, Y+10	; 0x0a
    106e:	2e 5f       	subi	r18, 0xFE	; 254
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	f9 01       	movw	r30, r18
    1074:	20 81       	ld	r18, Z
    1076:	22 95       	swap	r18
    1078:	26 95       	lsr	r18
    107a:	27 70       	andi	r18, 0x07	; 7
    107c:	24 0f       	add	r18, r20
    107e:	fc 01       	movw	r30, r24
    1080:	20 83       	st	Z, r18
    1082:	80 ef       	ldi	r24, 0xF0	; 240
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	29 85       	ldd	r18, Y+9	; 0x09
    1088:	3a 85       	ldd	r19, Y+10	; 0x0a
    108a:	2e 5f       	subi	r18, 0xFE	; 254
    108c:	3f 4f       	sbci	r19, 0xFF	; 255
    108e:	f9 01       	movw	r30, r18
    1090:	20 81       	ld	r18, Z
    1092:	22 0f       	add	r18, r18
    1094:	22 0f       	add	r18, r18
    1096:	22 0f       	add	r18, r18
    1098:	fc 01       	movw	r30, r24
    109a:	20 83       	st	Z, r18
    109c:	8f ee       	ldi	r24, 0xEF	; 239
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	2f ee       	ldi	r18, 0xEF	; 239
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	f9 01       	movw	r30, r18
    10a6:	20 81       	ld	r18, Z
    10a8:	20 61       	ori	r18, 0x10	; 16
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 83       	st	Z, r18
    10ae:	30 c0       	rjmp	.+96     	; 0x1110 <__stack+0x811>
          else              { Can_set_std_id(cmd->id.std);}
    10b0:	83 ef       	ldi	r24, 0xF3	; 243
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	29 85       	ldd	r18, Y+9	; 0x09
    10b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b8:	2e 5f       	subi	r18, 0xFE	; 254
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	2f 5f       	subi	r18, 0xFF	; 255
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	f9 01       	movw	r30, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	42 2f       	mov	r20, r18
    10c6:	42 95       	swap	r20
    10c8:	44 0f       	add	r20, r20
    10ca:	40 7e       	andi	r20, 0xE0	; 224
    10cc:	29 85       	ldd	r18, Y+9	; 0x09
    10ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    10d0:	2e 5f       	subi	r18, 0xFE	; 254
    10d2:	3f 4f       	sbci	r19, 0xFF	; 255
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	26 95       	lsr	r18
    10da:	26 95       	lsr	r18
    10dc:	26 95       	lsr	r18
    10de:	24 0f       	add	r18, r20
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
    10e4:	82 ef       	ldi	r24, 0xF2	; 242
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	29 85       	ldd	r18, Y+9	; 0x09
    10ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ec:	2e 5f       	subi	r18, 0xFE	; 254
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	22 95       	swap	r18
    10f6:	22 0f       	add	r18, r18
    10f8:	20 7e       	andi	r18, 0xE0	; 224
    10fa:	fc 01       	movw	r30, r24
    10fc:	20 83       	st	Z, r18
    10fe:	8f ee       	ldi	r24, 0xEF	; 239
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2f ee       	ldi	r18, 0xEF	; 239
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	f9 01       	movw	r30, r18
    1108:	20 81       	ld	r18, Z
    110a:	2f 7e       	andi	r18, 0xEF	; 239
    110c:	fc 01       	movw	r30, r24
    110e:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	9f ef       	ldi	r25, 0xFF	; 255
    1114:	dc 01       	movw	r26, r24
    1116:	8d 83       	std	Y+5, r24	; 0x05
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	af 83       	std	Y+7, r26	; 0x07
    111c:	b8 87       	std	Y+8, r27	; 0x08
    111e:	27 ef       	ldi	r18, 0xF7	; 247
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	ce 01       	movw	r24, r28
    1124:	05 96       	adiw	r24, 0x05	; 5
    1126:	03 96       	adiw	r24, 0x03	; 3
    1128:	fc 01       	movw	r30, r24
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	44 0f       	add	r20, r20
    1130:	44 0f       	add	r20, r20
    1132:	44 0f       	add	r20, r20
    1134:	ce 01       	movw	r24, r28
    1136:	05 96       	adiw	r24, 0x05	; 5
    1138:	02 96       	adiw	r24, 0x02	; 2
    113a:	fc 01       	movw	r30, r24
    113c:	80 81       	ld	r24, Z
    113e:	82 95       	swap	r24
    1140:	86 95       	lsr	r24
    1142:	87 70       	andi	r24, 0x07	; 7
    1144:	84 0f       	add	r24, r20
    1146:	f9 01       	movw	r30, r18
    1148:	80 83       	st	Z, r24
    114a:	26 ef       	ldi	r18, 0xF6	; 246
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	ce 01       	movw	r24, r28
    1150:	05 96       	adiw	r24, 0x05	; 5
    1152:	02 96       	adiw	r24, 0x02	; 2
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	44 0f       	add	r20, r20
    115c:	44 0f       	add	r20, r20
    115e:	44 0f       	add	r20, r20
    1160:	ce 01       	movw	r24, r28
    1162:	05 96       	adiw	r24, 0x05	; 5
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	fc 01       	movw	r30, r24
    1168:	80 81       	ld	r24, Z
    116a:	82 95       	swap	r24
    116c:	86 95       	lsr	r24
    116e:	87 70       	andi	r24, 0x07	; 7
    1170:	84 0f       	add	r24, r20
    1172:	f9 01       	movw	r30, r18
    1174:	80 83       	st	Z, r24
    1176:	25 ef       	ldi	r18, 0xF5	; 245
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	ce 01       	movw	r24, r28
    117c:	05 96       	adiw	r24, 0x05	; 5
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	fc 01       	movw	r30, r24
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	44 0f       	add	r20, r20
    1188:	44 0f       	add	r20, r20
    118a:	44 0f       	add	r20, r20
    118c:	ce 01       	movw	r24, r28
    118e:	05 96       	adiw	r24, 0x05	; 5
    1190:	fc 01       	movw	r30, r24
    1192:	80 81       	ld	r24, Z
    1194:	82 95       	swap	r24
    1196:	86 95       	lsr	r24
    1198:	87 70       	andi	r24, 0x07	; 7
    119a:	84 0f       	add	r24, r20
    119c:	f9 01       	movw	r30, r18
    119e:	80 83       	st	Z, r24
    11a0:	84 ef       	ldi	r24, 0xF4	; 244
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9e 01       	movw	r18, r28
    11a6:	2b 5f       	subi	r18, 0xFB	; 251
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	f9 01       	movw	r30, r18
    11ac:	20 81       	ld	r18, Z
    11ae:	22 0f       	add	r18, r18
    11b0:	22 0f       	add	r18, r18
    11b2:	22 0f       	add	r18, r18
    11b4:	fc 01       	movw	r30, r24
    11b6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    11b8:	8f ee       	ldi	r24, 0xEF	; 239
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	2f ee       	ldi	r18, 0xEF	; 239
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	f9 01       	movw	r30, r18
    11c2:	40 81       	ld	r20, Z
    11c4:	29 85       	ldd	r18, Y+9	; 0x09
    11c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11c8:	f9 01       	movw	r30, r18
    11ca:	26 81       	ldd	r18, Z+6	; 0x06
    11cc:	24 2b       	or	r18, r20
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
    11d2:	84 ef       	ldi	r24, 0xF4	; 244
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	24 ef       	ldi	r18, 0xF4	; 244
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	f9 01       	movw	r30, r18
    11dc:	20 81       	ld	r18, Z
    11de:	2b 7f       	andi	r18, 0xFB	; 251
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
          Can_set_idemsk();
    11e4:	84 ef       	ldi	r24, 0xF4	; 244
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	24 ef       	ldi	r18, 0xF4	; 244
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	f9 01       	movw	r30, r18
    11ee:	20 81       	ld	r18, Z
    11f0:	21 60       	ori	r18, 0x01	; 1
    11f2:	fc 01       	movw	r30, r24
    11f4:	20 83       	st	Z, r18
          Can_config_rx();       
    11f6:	8f ee       	ldi	r24, 0xEF	; 239
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	2f ee       	ldi	r18, 0xEF	; 239
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	f9 01       	movw	r30, r18
    1200:	20 81       	ld	r18, Z
    1202:	2f 73       	andi	r18, 0x3F	; 63
    1204:	fc 01       	movw	r30, r24
    1206:	20 83       	st	Z, r18
    1208:	8f ee       	ldi	r24, 0xEF	; 239
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	2f ee       	ldi	r18, 0xEF	; 239
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	f9 01       	movw	r30, r18
    1212:	20 81       	ld	r18, Z
    1214:	20 68       	ori	r18, 0x80	; 128
    1216:	fc 01       	movw	r30, r24
    1218:	20 83       	st	Z, r18
          break;
    121a:	84 c4       	rjmp	.+2312   	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	fc 01       	movw	r30, r24
    1222:	83 85       	ldd	r24, Z+11	; 0x0b
    1224:	88 23       	and	r24, r24
    1226:	09 f4       	brne	.+2      	; 0x122a <__stack+0x92b>
    1228:	69 c0       	rjmp	.+210    	; 0x12fc <__stack+0x9fd>
    122a:	83 ef       	ldi	r24, 0xF3	; 243
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	29 85       	ldd	r18, Y+9	; 0x09
    1230:	3a 85       	ldd	r19, Y+10	; 0x0a
    1232:	2e 5f       	subi	r18, 0xFE	; 254
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	2d 5f       	subi	r18, 0xFD	; 253
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	f9 01       	movw	r30, r18
    123c:	20 81       	ld	r18, Z
    123e:	42 2f       	mov	r20, r18
    1240:	44 0f       	add	r20, r20
    1242:	44 0f       	add	r20, r20
    1244:	44 0f       	add	r20, r20
    1246:	29 85       	ldd	r18, Y+9	; 0x09
    1248:	3a 85       	ldd	r19, Y+10	; 0x0a
    124a:	2e 5f       	subi	r18, 0xFE	; 254
    124c:	3f 4f       	sbci	r19, 0xFF	; 255
    124e:	2e 5f       	subi	r18, 0xFE	; 254
    1250:	3f 4f       	sbci	r19, 0xFF	; 255
    1252:	f9 01       	movw	r30, r18
    1254:	20 81       	ld	r18, Z
    1256:	22 95       	swap	r18
    1258:	26 95       	lsr	r18
    125a:	27 70       	andi	r18, 0x07	; 7
    125c:	24 0f       	add	r18, r20
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
    1262:	82 ef       	ldi	r24, 0xF2	; 242
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	29 85       	ldd	r18, Y+9	; 0x09
    1268:	3a 85       	ldd	r19, Y+10	; 0x0a
    126a:	2e 5f       	subi	r18, 0xFE	; 254
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	2e 5f       	subi	r18, 0xFE	; 254
    1270:	3f 4f       	sbci	r19, 0xFF	; 255
    1272:	f9 01       	movw	r30, r18
    1274:	20 81       	ld	r18, Z
    1276:	42 2f       	mov	r20, r18
    1278:	44 0f       	add	r20, r20
    127a:	44 0f       	add	r20, r20
    127c:	44 0f       	add	r20, r20
    127e:	29 85       	ldd	r18, Y+9	; 0x09
    1280:	3a 85       	ldd	r19, Y+10	; 0x0a
    1282:	2e 5f       	subi	r18, 0xFE	; 254
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	2f 5f       	subi	r18, 0xFF	; 255
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	f9 01       	movw	r30, r18
    128c:	20 81       	ld	r18, Z
    128e:	22 95       	swap	r18
    1290:	26 95       	lsr	r18
    1292:	27 70       	andi	r18, 0x07	; 7
    1294:	24 0f       	add	r18, r20
    1296:	fc 01       	movw	r30, r24
    1298:	20 83       	st	Z, r18
    129a:	81 ef       	ldi	r24, 0xF1	; 241
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	29 85       	ldd	r18, Y+9	; 0x09
    12a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    12a2:	2e 5f       	subi	r18, 0xFE	; 254
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	2f 5f       	subi	r18, 0xFF	; 255
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	f9 01       	movw	r30, r18
    12ac:	20 81       	ld	r18, Z
    12ae:	42 2f       	mov	r20, r18
    12b0:	44 0f       	add	r20, r20
    12b2:	44 0f       	add	r20, r20
    12b4:	44 0f       	add	r20, r20
    12b6:	29 85       	ldd	r18, Y+9	; 0x09
    12b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ba:	2e 5f       	subi	r18, 0xFE	; 254
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
    12be:	f9 01       	movw	r30, r18
    12c0:	20 81       	ld	r18, Z
    12c2:	22 95       	swap	r18
    12c4:	26 95       	lsr	r18
    12c6:	27 70       	andi	r18, 0x07	; 7
    12c8:	24 0f       	add	r18, r20
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
    12ce:	80 ef       	ldi	r24, 0xF0	; 240
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	29 85       	ldd	r18, Y+9	; 0x09
    12d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12d6:	2e 5f       	subi	r18, 0xFE	; 254
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	f9 01       	movw	r30, r18
    12dc:	20 81       	ld	r18, Z
    12de:	22 0f       	add	r18, r18
    12e0:	22 0f       	add	r18, r18
    12e2:	22 0f       	add	r18, r18
    12e4:	fc 01       	movw	r30, r24
    12e6:	20 83       	st	Z, r18
    12e8:	8f ee       	ldi	r24, 0xEF	; 239
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	2f ee       	ldi	r18, 0xEF	; 239
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	f9 01       	movw	r30, r18
    12f2:	20 81       	ld	r18, Z
    12f4:	20 61       	ori	r18, 0x10	; 16
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
    12fa:	30 c0       	rjmp	.+96     	; 0x135c <__stack+0xa5d>
          else              { Can_set_std_id(cmd->id.std);}
    12fc:	83 ef       	ldi	r24, 0xF3	; 243
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	29 85       	ldd	r18, Y+9	; 0x09
    1302:	3a 85       	ldd	r19, Y+10	; 0x0a
    1304:	2e 5f       	subi	r18, 0xFE	; 254
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	2f 5f       	subi	r18, 0xFF	; 255
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	f9 01       	movw	r30, r18
    130e:	20 81       	ld	r18, Z
    1310:	42 2f       	mov	r20, r18
    1312:	42 95       	swap	r20
    1314:	44 0f       	add	r20, r20
    1316:	40 7e       	andi	r20, 0xE0	; 224
    1318:	29 85       	ldd	r18, Y+9	; 0x09
    131a:	3a 85       	ldd	r19, Y+10	; 0x0a
    131c:	2e 5f       	subi	r18, 0xFE	; 254
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	f9 01       	movw	r30, r18
    1322:	20 81       	ld	r18, Z
    1324:	26 95       	lsr	r18
    1326:	26 95       	lsr	r18
    1328:	26 95       	lsr	r18
    132a:	24 0f       	add	r18, r20
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
    1330:	82 ef       	ldi	r24, 0xF2	; 242
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	29 85       	ldd	r18, Y+9	; 0x09
    1336:	3a 85       	ldd	r19, Y+10	; 0x0a
    1338:	2e 5f       	subi	r18, 0xFE	; 254
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	f9 01       	movw	r30, r18
    133e:	20 81       	ld	r18, Z
    1340:	22 95       	swap	r18
    1342:	22 0f       	add	r18, r18
    1344:	20 7e       	andi	r18, 0xE0	; 224
    1346:	fc 01       	movw	r30, r24
    1348:	20 83       	st	Z, r18
    134a:	8f ee       	ldi	r24, 0xEF	; 239
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	2f ee       	ldi	r18, 0xEF	; 239
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	f9 01       	movw	r30, r18
    1354:	20 81       	ld	r18, Z
    1356:	2f 7e       	andi	r18, 0xEF	; 239
    1358:	fc 01       	movw	r30, r24
    135a:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	9f ef       	ldi	r25, 0xFF	; 255
    1360:	dc 01       	movw	r26, r24
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	af 83       	std	Y+7, r26	; 0x07
    1368:	b8 87       	std	Y+8, r27	; 0x08
    136a:	27 ef       	ldi	r18, 0xF7	; 247
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	ce 01       	movw	r24, r28
    1370:	05 96       	adiw	r24, 0x05	; 5
    1372:	03 96       	adiw	r24, 0x03	; 3
    1374:	fc 01       	movw	r30, r24
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	44 0f       	add	r20, r20
    137c:	44 0f       	add	r20, r20
    137e:	44 0f       	add	r20, r20
    1380:	ce 01       	movw	r24, r28
    1382:	05 96       	adiw	r24, 0x05	; 5
    1384:	02 96       	adiw	r24, 0x02	; 2
    1386:	fc 01       	movw	r30, r24
    1388:	80 81       	ld	r24, Z
    138a:	82 95       	swap	r24
    138c:	86 95       	lsr	r24
    138e:	87 70       	andi	r24, 0x07	; 7
    1390:	84 0f       	add	r24, r20
    1392:	f9 01       	movw	r30, r18
    1394:	80 83       	st	Z, r24
    1396:	26 ef       	ldi	r18, 0xF6	; 246
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	ce 01       	movw	r24, r28
    139c:	05 96       	adiw	r24, 0x05	; 5
    139e:	02 96       	adiw	r24, 0x02	; 2
    13a0:	fc 01       	movw	r30, r24
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	44 0f       	add	r20, r20
    13a8:	44 0f       	add	r20, r20
    13aa:	44 0f       	add	r20, r20
    13ac:	ce 01       	movw	r24, r28
    13ae:	05 96       	adiw	r24, 0x05	; 5
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	fc 01       	movw	r30, r24
    13b4:	80 81       	ld	r24, Z
    13b6:	82 95       	swap	r24
    13b8:	86 95       	lsr	r24
    13ba:	87 70       	andi	r24, 0x07	; 7
    13bc:	84 0f       	add	r24, r20
    13be:	f9 01       	movw	r30, r18
    13c0:	80 83       	st	Z, r24
    13c2:	25 ef       	ldi	r18, 0xF5	; 245
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	ce 01       	movw	r24, r28
    13c8:	05 96       	adiw	r24, 0x05	; 5
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	fc 01       	movw	r30, r24
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	44 0f       	add	r20, r20
    13d4:	44 0f       	add	r20, r20
    13d6:	44 0f       	add	r20, r20
    13d8:	ce 01       	movw	r24, r28
    13da:	05 96       	adiw	r24, 0x05	; 5
    13dc:	fc 01       	movw	r30, r24
    13de:	80 81       	ld	r24, Z
    13e0:	82 95       	swap	r24
    13e2:	86 95       	lsr	r24
    13e4:	87 70       	andi	r24, 0x07	; 7
    13e6:	84 0f       	add	r24, r20
    13e8:	f9 01       	movw	r30, r18
    13ea:	80 83       	st	Z, r24
    13ec:	84 ef       	ldi	r24, 0xF4	; 244
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9e 01       	movw	r18, r28
    13f2:	2b 5f       	subi	r18, 0xFB	; 251
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	f9 01       	movw	r30, r18
    13f8:	20 81       	ld	r18, Z
    13fa:	22 0f       	add	r18, r18
    13fc:	22 0f       	add	r18, r18
    13fe:	22 0f       	add	r18, r18
    1400:	fc 01       	movw	r30, r24
    1402:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1404:	8f ee       	ldi	r24, 0xEF	; 239
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	2f ee       	ldi	r18, 0xEF	; 239
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	f9 01       	movw	r30, r18
    140e:	40 81       	ld	r20, Z
    1410:	29 85       	ldd	r18, Y+9	; 0x09
    1412:	3a 85       	ldd	r19, Y+10	; 0x0a
    1414:	f9 01       	movw	r30, r18
    1416:	26 81       	ldd	r18, Z+6	; 0x06
    1418:	24 2b       	or	r18, r20
    141a:	fc 01       	movw	r30, r24
    141c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	9a 85       	ldd	r25, Y+10	; 0x0a
    1422:	fc 01       	movw	r30, r24
    1424:	12 86       	std	Z+10, r1	; 0x0a
    1426:	84 ef       	ldi	r24, 0xF4	; 244
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	24 ef       	ldi	r18, 0xF4	; 244
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	f9 01       	movw	r30, r18
    1430:	20 81       	ld	r18, Z
    1432:	24 60       	ori	r18, 0x04	; 4
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18
    1438:	80 ef       	ldi	r24, 0xF0	; 240
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	20 ef       	ldi	r18, 0xF0	; 240
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	2b 7f       	andi	r18, 0xFB	; 251
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
          Can_set_idemsk();
    144a:	84 ef       	ldi	r24, 0xF4	; 244
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	24 ef       	ldi	r18, 0xF4	; 244
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	f9 01       	movw	r30, r18
    1454:	20 81       	ld	r18, Z
    1456:	21 60       	ori	r18, 0x01	; 1
    1458:	fc 01       	movw	r30, r24
    145a:	20 83       	st	Z, r18
          Can_config_rx();       
    145c:	8f ee       	ldi	r24, 0xEF	; 239
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	2f ee       	ldi	r18, 0xEF	; 239
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	f9 01       	movw	r30, r18
    1466:	20 81       	ld	r18, Z
    1468:	2f 73       	andi	r18, 0x3F	; 63
    146a:	fc 01       	movw	r30, r24
    146c:	20 83       	st	Z, r18
    146e:	8f ee       	ldi	r24, 0xEF	; 239
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	2f ee       	ldi	r18, 0xEF	; 239
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	f9 01       	movw	r30, r18
    1478:	20 81       	ld	r18, Z
    147a:	20 68       	ori	r18, 0x80	; 128
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18
          break;
    1480:	51 c3       	rjmp	.+1698   	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	fc 01       	movw	r30, r24
    1488:	83 85       	ldd	r24, Z+11	; 0x0b
    148a:	88 23       	and	r24, r24
    148c:	09 f4       	brne	.+2      	; 0x1490 <__stack+0xb91>
    148e:	69 c0       	rjmp	.+210    	; 0x1562 <__stack+0xc63>
    1490:	83 ef       	ldi	r24, 0xF3	; 243
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	29 85       	ldd	r18, Y+9	; 0x09
    1496:	3a 85       	ldd	r19, Y+10	; 0x0a
    1498:	2e 5f       	subi	r18, 0xFE	; 254
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	2d 5f       	subi	r18, 0xFD	; 253
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	f9 01       	movw	r30, r18
    14a2:	20 81       	ld	r18, Z
    14a4:	42 2f       	mov	r20, r18
    14a6:	44 0f       	add	r20, r20
    14a8:	44 0f       	add	r20, r20
    14aa:	44 0f       	add	r20, r20
    14ac:	29 85       	ldd	r18, Y+9	; 0x09
    14ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    14b0:	2e 5f       	subi	r18, 0xFE	; 254
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	2e 5f       	subi	r18, 0xFE	; 254
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	f9 01       	movw	r30, r18
    14ba:	20 81       	ld	r18, Z
    14bc:	22 95       	swap	r18
    14be:	26 95       	lsr	r18
    14c0:	27 70       	andi	r18, 0x07	; 7
    14c2:	24 0f       	add	r18, r20
    14c4:	fc 01       	movw	r30, r24
    14c6:	20 83       	st	Z, r18
    14c8:	82 ef       	ldi	r24, 0xF2	; 242
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	29 85       	ldd	r18, Y+9	; 0x09
    14ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    14d0:	2e 5f       	subi	r18, 0xFE	; 254
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	2e 5f       	subi	r18, 0xFE	; 254
    14d6:	3f 4f       	sbci	r19, 0xFF	; 255
    14d8:	f9 01       	movw	r30, r18
    14da:	20 81       	ld	r18, Z
    14dc:	42 2f       	mov	r20, r18
    14de:	44 0f       	add	r20, r20
    14e0:	44 0f       	add	r20, r20
    14e2:	44 0f       	add	r20, r20
    14e4:	29 85       	ldd	r18, Y+9	; 0x09
    14e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    14e8:	2e 5f       	subi	r18, 0xFE	; 254
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	2f 5f       	subi	r18, 0xFF	; 255
    14ee:	3f 4f       	sbci	r19, 0xFF	; 255
    14f0:	f9 01       	movw	r30, r18
    14f2:	20 81       	ld	r18, Z
    14f4:	22 95       	swap	r18
    14f6:	26 95       	lsr	r18
    14f8:	27 70       	andi	r18, 0x07	; 7
    14fa:	24 0f       	add	r18, r20
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 83       	st	Z, r18
    1500:	81 ef       	ldi	r24, 0xF1	; 241
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	29 85       	ldd	r18, Y+9	; 0x09
    1506:	3a 85       	ldd	r19, Y+10	; 0x0a
    1508:	2e 5f       	subi	r18, 0xFE	; 254
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	2f 5f       	subi	r18, 0xFF	; 255
    150e:	3f 4f       	sbci	r19, 0xFF	; 255
    1510:	f9 01       	movw	r30, r18
    1512:	20 81       	ld	r18, Z
    1514:	42 2f       	mov	r20, r18
    1516:	44 0f       	add	r20, r20
    1518:	44 0f       	add	r20, r20
    151a:	44 0f       	add	r20, r20
    151c:	29 85       	ldd	r18, Y+9	; 0x09
    151e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1520:	2e 5f       	subi	r18, 0xFE	; 254
    1522:	3f 4f       	sbci	r19, 0xFF	; 255
    1524:	f9 01       	movw	r30, r18
    1526:	20 81       	ld	r18, Z
    1528:	22 95       	swap	r18
    152a:	26 95       	lsr	r18
    152c:	27 70       	andi	r18, 0x07	; 7
    152e:	24 0f       	add	r18, r20
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
    1534:	80 ef       	ldi	r24, 0xF0	; 240
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	29 85       	ldd	r18, Y+9	; 0x09
    153a:	3a 85       	ldd	r19, Y+10	; 0x0a
    153c:	2e 5f       	subi	r18, 0xFE	; 254
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	f9 01       	movw	r30, r18
    1542:	20 81       	ld	r18, Z
    1544:	22 0f       	add	r18, r18
    1546:	22 0f       	add	r18, r18
    1548:	22 0f       	add	r18, r18
    154a:	fc 01       	movw	r30, r24
    154c:	20 83       	st	Z, r18
    154e:	8f ee       	ldi	r24, 0xEF	; 239
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	2f ee       	ldi	r18, 0xEF	; 239
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	f9 01       	movw	r30, r18
    1558:	20 81       	ld	r18, Z
    155a:	20 61       	ori	r18, 0x10	; 16
    155c:	fc 01       	movw	r30, r24
    155e:	20 83       	st	Z, r18
    1560:	30 c0       	rjmp	.+96     	; 0x15c2 <__stack+0xcc3>
          else              { Can_set_std_id(cmd->id.std);}
    1562:	83 ef       	ldi	r24, 0xF3	; 243
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	29 85       	ldd	r18, Y+9	; 0x09
    1568:	3a 85       	ldd	r19, Y+10	; 0x0a
    156a:	2e 5f       	subi	r18, 0xFE	; 254
    156c:	3f 4f       	sbci	r19, 0xFF	; 255
    156e:	2f 5f       	subi	r18, 0xFF	; 255
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
    1572:	f9 01       	movw	r30, r18
    1574:	20 81       	ld	r18, Z
    1576:	42 2f       	mov	r20, r18
    1578:	42 95       	swap	r20
    157a:	44 0f       	add	r20, r20
    157c:	40 7e       	andi	r20, 0xE0	; 224
    157e:	29 85       	ldd	r18, Y+9	; 0x09
    1580:	3a 85       	ldd	r19, Y+10	; 0x0a
    1582:	2e 5f       	subi	r18, 0xFE	; 254
    1584:	3f 4f       	sbci	r19, 0xFF	; 255
    1586:	f9 01       	movw	r30, r18
    1588:	20 81       	ld	r18, Z
    158a:	26 95       	lsr	r18
    158c:	26 95       	lsr	r18
    158e:	26 95       	lsr	r18
    1590:	24 0f       	add	r18, r20
    1592:	fc 01       	movw	r30, r24
    1594:	20 83       	st	Z, r18
    1596:	82 ef       	ldi	r24, 0xF2	; 242
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	29 85       	ldd	r18, Y+9	; 0x09
    159c:	3a 85       	ldd	r19, Y+10	; 0x0a
    159e:	2e 5f       	subi	r18, 0xFE	; 254
    15a0:	3f 4f       	sbci	r19, 0xFF	; 255
    15a2:	f9 01       	movw	r30, r18
    15a4:	20 81       	ld	r18, Z
    15a6:	22 95       	swap	r18
    15a8:	22 0f       	add	r18, r18
    15aa:	20 7e       	andi	r18, 0xE0	; 224
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18
    15b0:	8f ee       	ldi	r24, 0xEF	; 239
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	2f ee       	ldi	r18, 0xEF	; 239
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	f9 01       	movw	r30, r18
    15ba:	20 81       	ld	r18, Z
    15bc:	2f 7e       	andi	r18, 0xEF	; 239
    15be:	fc 01       	movw	r30, r24
    15c0:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	9f ef       	ldi	r25, 0xFF	; 255
    15c6:	dc 01       	movw	r26, r24
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	af 83       	std	Y+7, r26	; 0x07
    15ce:	b8 87       	std	Y+8, r27	; 0x08
    15d0:	27 ef       	ldi	r18, 0xF7	; 247
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	ce 01       	movw	r24, r28
    15d6:	05 96       	adiw	r24, 0x05	; 5
    15d8:	03 96       	adiw	r24, 0x03	; 3
    15da:	fc 01       	movw	r30, r24
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	44 0f       	add	r20, r20
    15e2:	44 0f       	add	r20, r20
    15e4:	44 0f       	add	r20, r20
    15e6:	ce 01       	movw	r24, r28
    15e8:	05 96       	adiw	r24, 0x05	; 5
    15ea:	02 96       	adiw	r24, 0x02	; 2
    15ec:	fc 01       	movw	r30, r24
    15ee:	80 81       	ld	r24, Z
    15f0:	82 95       	swap	r24
    15f2:	86 95       	lsr	r24
    15f4:	87 70       	andi	r24, 0x07	; 7
    15f6:	84 0f       	add	r24, r20
    15f8:	f9 01       	movw	r30, r18
    15fa:	80 83       	st	Z, r24
    15fc:	26 ef       	ldi	r18, 0xF6	; 246
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	ce 01       	movw	r24, r28
    1602:	05 96       	adiw	r24, 0x05	; 5
    1604:	02 96       	adiw	r24, 0x02	; 2
    1606:	fc 01       	movw	r30, r24
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	44 0f       	add	r20, r20
    160e:	44 0f       	add	r20, r20
    1610:	44 0f       	add	r20, r20
    1612:	ce 01       	movw	r24, r28
    1614:	05 96       	adiw	r24, 0x05	; 5
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	82 95       	swap	r24
    161e:	86 95       	lsr	r24
    1620:	87 70       	andi	r24, 0x07	; 7
    1622:	84 0f       	add	r24, r20
    1624:	f9 01       	movw	r30, r18
    1626:	80 83       	st	Z, r24
    1628:	25 ef       	ldi	r18, 0xF5	; 245
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	ce 01       	movw	r24, r28
    162e:	05 96       	adiw	r24, 0x05	; 5
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	fc 01       	movw	r30, r24
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	44 0f       	add	r20, r20
    163a:	44 0f       	add	r20, r20
    163c:	44 0f       	add	r20, r20
    163e:	ce 01       	movw	r24, r28
    1640:	05 96       	adiw	r24, 0x05	; 5
    1642:	fc 01       	movw	r30, r24
    1644:	80 81       	ld	r24, Z
    1646:	82 95       	swap	r24
    1648:	86 95       	lsr	r24
    164a:	87 70       	andi	r24, 0x07	; 7
    164c:	84 0f       	add	r24, r20
    164e:	f9 01       	movw	r30, r18
    1650:	80 83       	st	Z, r24
    1652:	84 ef       	ldi	r24, 0xF4	; 244
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9e 01       	movw	r18, r28
    1658:	2b 5f       	subi	r18, 0xFB	; 251
    165a:	3f 4f       	sbci	r19, 0xFF	; 255
    165c:	f9 01       	movw	r30, r18
    165e:	20 81       	ld	r18, Z
    1660:	22 0f       	add	r18, r18
    1662:	22 0f       	add	r18, r18
    1664:	22 0f       	add	r18, r18
    1666:	fc 01       	movw	r30, r24
    1668:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    166a:	8f ee       	ldi	r24, 0xEF	; 239
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	2f ee       	ldi	r18, 0xEF	; 239
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	f9 01       	movw	r30, r18
    1674:	40 81       	ld	r20, Z
    1676:	29 85       	ldd	r18, Y+9	; 0x09
    1678:	3a 85       	ldd	r19, Y+10	; 0x0a
    167a:	f9 01       	movw	r30, r18
    167c:	26 81       	ldd	r18, Z+6	; 0x06
    167e:	24 2b       	or	r18, r20
    1680:	fc 01       	movw	r30, r24
    1682:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1684:	89 85       	ldd	r24, Y+9	; 0x09
    1686:	9a 85       	ldd	r25, Y+10	; 0x0a
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	fc 01       	movw	r30, r24
    168c:	22 87       	std	Z+10, r18	; 0x0a
    168e:	84 ef       	ldi	r24, 0xF4	; 244
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	24 ef       	ldi	r18, 0xF4	; 244
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	f9 01       	movw	r30, r18
    1698:	20 81       	ld	r18, Z
    169a:	24 60       	ori	r18, 0x04	; 4
    169c:	fc 01       	movw	r30, r24
    169e:	20 83       	st	Z, r18
    16a0:	80 ef       	ldi	r24, 0xF0	; 240
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	20 ef       	ldi	r18, 0xF0	; 240
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	f9 01       	movw	r30, r18
    16aa:	20 81       	ld	r18, Z
    16ac:	24 60       	ori	r18, 0x04	; 4
    16ae:	fc 01       	movw	r30, r24
    16b0:	20 83       	st	Z, r18
          Can_clear_rplv();
    16b2:	8f ee       	ldi	r24, 0xEF	; 239
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	2f ee       	ldi	r18, 0xEF	; 239
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	f9 01       	movw	r30, r18
    16bc:	20 81       	ld	r18, Z
    16be:	2f 7d       	andi	r18, 0xDF	; 223
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 83       	st	Z, r18
          Can_set_idemsk();
    16c4:	84 ef       	ldi	r24, 0xF4	; 244
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	24 ef       	ldi	r18, 0xF4	; 244
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	f9 01       	movw	r30, r18
    16ce:	20 81       	ld	r18, Z
    16d0:	21 60       	ori	r18, 0x01	; 1
    16d2:	fc 01       	movw	r30, r24
    16d4:	20 83       	st	Z, r18
          Can_config_rx();       
    16d6:	8f ee       	ldi	r24, 0xEF	; 239
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	2f ee       	ldi	r18, 0xEF	; 239
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	f9 01       	movw	r30, r18
    16e0:	20 81       	ld	r18, Z
    16e2:	2f 73       	andi	r18, 0x3F	; 63
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 83       	st	Z, r18
    16e8:	8f ee       	ldi	r24, 0xEF	; 239
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	2f ee       	ldi	r18, 0xEF	; 239
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	f9 01       	movw	r30, r18
    16f2:	20 81       	ld	r18, Z
    16f4:	20 68       	ori	r18, 0x80	; 128
    16f6:	fc 01       	movw	r30, r24
    16f8:	20 83       	st	Z, r18
          break;
    16fa:	14 c2       	rjmp	.+1064   	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    16fc:	19 82       	std	Y+1, r1	; 0x01
    16fe:	13 c0       	rjmp	.+38     	; 0x1726 <__stack+0xe27>
    1700:	8a ef       	ldi	r24, 0xFA	; 250
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	29 85       	ldd	r18, Y+9	; 0x09
    1706:	3a 85       	ldd	r19, Y+10	; 0x0a
    1708:	f9 01       	movw	r30, r18
    170a:	47 81       	ldd	r20, Z+7	; 0x07
    170c:	50 85       	ldd	r21, Z+8	; 0x08
    170e:	29 81       	ldd	r18, Y+1	; 0x01
    1710:	22 2f       	mov	r18, r18
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	24 0f       	add	r18, r20
    1716:	35 1f       	adc	r19, r21
    1718:	f9 01       	movw	r30, r18
    171a:	20 81       	ld	r18, Z
    171c:	fc 01       	movw	r30, r24
    171e:	20 83       	st	Z, r18
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	fc 01       	movw	r30, r24
    172c:	96 81       	ldd	r25, Z+6	; 0x06
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	89 17       	cp	r24, r25
    1732:	30 f3       	brcs	.-52     	; 0x1700 <__stack+0xe01>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1734:	1d 82       	std	Y+5, r1	; 0x05
    1736:	1e 82       	std	Y+6, r1	; 0x06
    1738:	1f 82       	std	Y+7, r1	; 0x07
    173a:	18 86       	std	Y+8, r1	; 0x08
    173c:	27 ef       	ldi	r18, 0xF7	; 247
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	ce 01       	movw	r24, r28
    1742:	05 96       	adiw	r24, 0x05	; 5
    1744:	03 96       	adiw	r24, 0x03	; 3
    1746:	fc 01       	movw	r30, r24
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	44 0f       	add	r20, r20
    174e:	44 0f       	add	r20, r20
    1750:	44 0f       	add	r20, r20
    1752:	ce 01       	movw	r24, r28
    1754:	05 96       	adiw	r24, 0x05	; 5
    1756:	02 96       	adiw	r24, 0x02	; 2
    1758:	fc 01       	movw	r30, r24
    175a:	80 81       	ld	r24, Z
    175c:	82 95       	swap	r24
    175e:	86 95       	lsr	r24
    1760:	87 70       	andi	r24, 0x07	; 7
    1762:	84 0f       	add	r24, r20
    1764:	f9 01       	movw	r30, r18
    1766:	80 83       	st	Z, r24
    1768:	26 ef       	ldi	r18, 0xF6	; 246
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	ce 01       	movw	r24, r28
    176e:	05 96       	adiw	r24, 0x05	; 5
    1770:	02 96       	adiw	r24, 0x02	; 2
    1772:	fc 01       	movw	r30, r24
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	44 0f       	add	r20, r20
    177a:	44 0f       	add	r20, r20
    177c:	44 0f       	add	r20, r20
    177e:	ce 01       	movw	r24, r28
    1780:	05 96       	adiw	r24, 0x05	; 5
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	fc 01       	movw	r30, r24
    1786:	80 81       	ld	r24, Z
    1788:	82 95       	swap	r24
    178a:	86 95       	lsr	r24
    178c:	87 70       	andi	r24, 0x07	; 7
    178e:	84 0f       	add	r24, r20
    1790:	f9 01       	movw	r30, r18
    1792:	80 83       	st	Z, r24
    1794:	25 ef       	ldi	r18, 0xF5	; 245
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	ce 01       	movw	r24, r28
    179a:	05 96       	adiw	r24, 0x05	; 5
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	fc 01       	movw	r30, r24
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	44 0f       	add	r20, r20
    17a6:	44 0f       	add	r20, r20
    17a8:	44 0f       	add	r20, r20
    17aa:	ce 01       	movw	r24, r28
    17ac:	05 96       	adiw	r24, 0x05	; 5
    17ae:	fc 01       	movw	r30, r24
    17b0:	80 81       	ld	r24, Z
    17b2:	82 95       	swap	r24
    17b4:	86 95       	lsr	r24
    17b6:	87 70       	andi	r24, 0x07	; 7
    17b8:	84 0f       	add	r24, r20
    17ba:	f9 01       	movw	r30, r18
    17bc:	80 83       	st	Z, r24
    17be:	84 ef       	ldi	r24, 0xF4	; 244
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9e 01       	movw	r18, r28
    17c4:	2b 5f       	subi	r18, 0xFB	; 251
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	f9 01       	movw	r30, r18
    17ca:	20 81       	ld	r18, Z
    17cc:	22 0f       	add	r18, r18
    17ce:	22 0f       	add	r18, r18
    17d0:	22 0f       	add	r18, r18
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    17d6:	8f ee       	ldi	r24, 0xEF	; 239
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	2f ee       	ldi	r18, 0xEF	; 239
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	f9 01       	movw	r30, r18
    17e0:	40 81       	ld	r20, Z
    17e2:	29 85       	ldd	r18, Y+9	; 0x09
    17e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e6:	f9 01       	movw	r30, r18
    17e8:	26 81       	ldd	r18, Z+6	; 0x06
    17ea:	24 2b       	or	r18, r20
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    17f0:	89 85       	ldd	r24, Y+9	; 0x09
    17f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	fc 01       	movw	r30, r24
    17f8:	22 87       	std	Z+10, r18	; 0x0a
    17fa:	84 ef       	ldi	r24, 0xF4	; 244
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	24 ef       	ldi	r18, 0xF4	; 244
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	f9 01       	movw	r30, r18
    1804:	20 81       	ld	r18, Z
    1806:	24 60       	ori	r18, 0x04	; 4
    1808:	fc 01       	movw	r30, r24
    180a:	20 83       	st	Z, r18
    180c:	80 ef       	ldi	r24, 0xF0	; 240
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	20 ef       	ldi	r18, 0xF0	; 240
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	f9 01       	movw	r30, r18
    1816:	20 81       	ld	r18, Z
    1818:	24 60       	ori	r18, 0x04	; 4
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
          Can_set_rplv();
    181e:	8f ee       	ldi	r24, 0xEF	; 239
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	2f ee       	ldi	r18, 0xEF	; 239
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	f9 01       	movw	r30, r18
    1828:	20 81       	ld	r18, Z
    182a:	20 62       	ori	r18, 0x20	; 32
    182c:	fc 01       	movw	r30, r24
    182e:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1830:	84 ef       	ldi	r24, 0xF4	; 244
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	24 ef       	ldi	r18, 0xF4	; 244
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	f9 01       	movw	r30, r18
    183a:	20 81       	ld	r18, Z
    183c:	2e 7f       	andi	r18, 0xFE	; 254
    183e:	fc 01       	movw	r30, r24
    1840:	20 83       	st	Z, r18
          Can_config_rx();       
    1842:	8f ee       	ldi	r24, 0xEF	; 239
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	2f ee       	ldi	r18, 0xEF	; 239
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	f9 01       	movw	r30, r18
    184c:	20 81       	ld	r18, Z
    184e:	2f 73       	andi	r18, 0x3F	; 63
    1850:	fc 01       	movw	r30, r24
    1852:	20 83       	st	Z, r18
    1854:	8f ee       	ldi	r24, 0xEF	; 239
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	2f ee       	ldi	r18, 0xEF	; 239
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	f9 01       	movw	r30, r18
    185e:	20 81       	ld	r18, Z
    1860:	20 68       	ori	r18, 0x80	; 128
    1862:	fc 01       	movw	r30, r24
    1864:	20 83       	st	Z, r18
          break;
    1866:	5e c1       	rjmp	.+700    	; 0x1b24 <__stack+0x1225>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1868:	89 85       	ldd	r24, Y+9	; 0x09
    186a:	9a 85       	ldd	r25, Y+10	; 0x0a
    186c:	fc 01       	movw	r30, r24
    186e:	83 85       	ldd	r24, Z+11	; 0x0b
    1870:	88 23       	and	r24, r24
    1872:	09 f4       	brne	.+2      	; 0x1876 <__stack+0xf77>
    1874:	69 c0       	rjmp	.+210    	; 0x1948 <__stack+0x1049>
    1876:	83 ef       	ldi	r24, 0xF3	; 243
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	29 85       	ldd	r18, Y+9	; 0x09
    187c:	3a 85       	ldd	r19, Y+10	; 0x0a
    187e:	2e 5f       	subi	r18, 0xFE	; 254
    1880:	3f 4f       	sbci	r19, 0xFF	; 255
    1882:	2d 5f       	subi	r18, 0xFD	; 253
    1884:	3f 4f       	sbci	r19, 0xFF	; 255
    1886:	f9 01       	movw	r30, r18
    1888:	20 81       	ld	r18, Z
    188a:	42 2f       	mov	r20, r18
    188c:	44 0f       	add	r20, r20
    188e:	44 0f       	add	r20, r20
    1890:	44 0f       	add	r20, r20
    1892:	29 85       	ldd	r18, Y+9	; 0x09
    1894:	3a 85       	ldd	r19, Y+10	; 0x0a
    1896:	2e 5f       	subi	r18, 0xFE	; 254
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	2e 5f       	subi	r18, 0xFE	; 254
    189c:	3f 4f       	sbci	r19, 0xFF	; 255
    189e:	f9 01       	movw	r30, r18
    18a0:	20 81       	ld	r18, Z
    18a2:	22 95       	swap	r18
    18a4:	26 95       	lsr	r18
    18a6:	27 70       	andi	r18, 0x07	; 7
    18a8:	24 0f       	add	r18, r20
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 83       	st	Z, r18
    18ae:	82 ef       	ldi	r24, 0xF2	; 242
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	29 85       	ldd	r18, Y+9	; 0x09
    18b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b6:	2e 5f       	subi	r18, 0xFE	; 254
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	2e 5f       	subi	r18, 0xFE	; 254
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	f9 01       	movw	r30, r18
    18c0:	20 81       	ld	r18, Z
    18c2:	42 2f       	mov	r20, r18
    18c4:	44 0f       	add	r20, r20
    18c6:	44 0f       	add	r20, r20
    18c8:	44 0f       	add	r20, r20
    18ca:	29 85       	ldd	r18, Y+9	; 0x09
    18cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ce:	2e 5f       	subi	r18, 0xFE	; 254
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	2f 5f       	subi	r18, 0xFF	; 255
    18d4:	3f 4f       	sbci	r19, 0xFF	; 255
    18d6:	f9 01       	movw	r30, r18
    18d8:	20 81       	ld	r18, Z
    18da:	22 95       	swap	r18
    18dc:	26 95       	lsr	r18
    18de:	27 70       	andi	r18, 0x07	; 7
    18e0:	24 0f       	add	r18, r20
    18e2:	fc 01       	movw	r30, r24
    18e4:	20 83       	st	Z, r18
    18e6:	81 ef       	ldi	r24, 0xF1	; 241
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	29 85       	ldd	r18, Y+9	; 0x09
    18ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ee:	2e 5f       	subi	r18, 0xFE	; 254
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	f9 01       	movw	r30, r18
    18f8:	20 81       	ld	r18, Z
    18fa:	42 2f       	mov	r20, r18
    18fc:	44 0f       	add	r20, r20
    18fe:	44 0f       	add	r20, r20
    1900:	44 0f       	add	r20, r20
    1902:	29 85       	ldd	r18, Y+9	; 0x09
    1904:	3a 85       	ldd	r19, Y+10	; 0x0a
    1906:	2e 5f       	subi	r18, 0xFE	; 254
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	f9 01       	movw	r30, r18
    190c:	20 81       	ld	r18, Z
    190e:	22 95       	swap	r18
    1910:	26 95       	lsr	r18
    1912:	27 70       	andi	r18, 0x07	; 7
    1914:	24 0f       	add	r18, r20
    1916:	fc 01       	movw	r30, r24
    1918:	20 83       	st	Z, r18
    191a:	80 ef       	ldi	r24, 0xF0	; 240
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	29 85       	ldd	r18, Y+9	; 0x09
    1920:	3a 85       	ldd	r19, Y+10	; 0x0a
    1922:	2e 5f       	subi	r18, 0xFE	; 254
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	f9 01       	movw	r30, r18
    1928:	20 81       	ld	r18, Z
    192a:	22 0f       	add	r18, r18
    192c:	22 0f       	add	r18, r18
    192e:	22 0f       	add	r18, r18
    1930:	fc 01       	movw	r30, r24
    1932:	20 83       	st	Z, r18
    1934:	8f ee       	ldi	r24, 0xEF	; 239
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	2f ee       	ldi	r18, 0xEF	; 239
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	f9 01       	movw	r30, r18
    193e:	20 81       	ld	r18, Z
    1940:	20 61       	ori	r18, 0x10	; 16
    1942:	fc 01       	movw	r30, r24
    1944:	20 83       	st	Z, r18
    1946:	30 c0       	rjmp	.+96     	; 0x19a8 <__stack+0x10a9>
          else              { Can_set_std_id(cmd->id.std);}
    1948:	83 ef       	ldi	r24, 0xF3	; 243
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	29 85       	ldd	r18, Y+9	; 0x09
    194e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1950:	2e 5f       	subi	r18, 0xFE	; 254
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	2f 5f       	subi	r18, 0xFF	; 255
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
    1958:	f9 01       	movw	r30, r18
    195a:	20 81       	ld	r18, Z
    195c:	42 2f       	mov	r20, r18
    195e:	42 95       	swap	r20
    1960:	44 0f       	add	r20, r20
    1962:	40 7e       	andi	r20, 0xE0	; 224
    1964:	29 85       	ldd	r18, Y+9	; 0x09
    1966:	3a 85       	ldd	r19, Y+10	; 0x0a
    1968:	2e 5f       	subi	r18, 0xFE	; 254
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	f9 01       	movw	r30, r18
    196e:	20 81       	ld	r18, Z
    1970:	26 95       	lsr	r18
    1972:	26 95       	lsr	r18
    1974:	26 95       	lsr	r18
    1976:	24 0f       	add	r18, r20
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18
    197c:	82 ef       	ldi	r24, 0xF2	; 242
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	29 85       	ldd	r18, Y+9	; 0x09
    1982:	3a 85       	ldd	r19, Y+10	; 0x0a
    1984:	2e 5f       	subi	r18, 0xFE	; 254
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	f9 01       	movw	r30, r18
    198a:	20 81       	ld	r18, Z
    198c:	22 95       	swap	r18
    198e:	22 0f       	add	r18, r18
    1990:	20 7e       	andi	r18, 0xE0	; 224
    1992:	fc 01       	movw	r30, r24
    1994:	20 83       	st	Z, r18
    1996:	8f ee       	ldi	r24, 0xEF	; 239
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	2f ee       	ldi	r18, 0xEF	; 239
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	f9 01       	movw	r30, r18
    19a0:	20 81       	ld	r18, Z
    19a2:	2f 7e       	andi	r18, 0xEF	; 239
    19a4:	fc 01       	movw	r30, r24
    19a6:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    19a8:	19 82       	std	Y+1, r1	; 0x01
    19aa:	13 c0       	rjmp	.+38     	; 0x19d2 <__stack+0x10d3>
    19ac:	8a ef       	ldi	r24, 0xFA	; 250
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	29 85       	ldd	r18, Y+9	; 0x09
    19b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    19b4:	f9 01       	movw	r30, r18
    19b6:	47 81       	ldd	r20, Z+7	; 0x07
    19b8:	50 85       	ldd	r21, Z+8	; 0x08
    19ba:	29 81       	ldd	r18, Y+1	; 0x01
    19bc:	22 2f       	mov	r18, r18
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	24 0f       	add	r18, r20
    19c2:	35 1f       	adc	r19, r21
    19c4:	f9 01       	movw	r30, r18
    19c6:	20 81       	ld	r18, Z
    19c8:	fc 01       	movw	r30, r24
    19ca:	20 83       	st	Z, r18
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	fc 01       	movw	r30, r24
    19d8:	96 81       	ldd	r25, Z+6	; 0x06
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	89 17       	cp	r24, r25
    19de:	30 f3       	brcs	.-52     	; 0x19ac <__stack+0x10ad>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	9f ef       	ldi	r25, 0xFF	; 255
    19e4:	dc 01       	movw	r26, r24
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	af 83       	std	Y+7, r26	; 0x07
    19ec:	b8 87       	std	Y+8, r27	; 0x08
    19ee:	27 ef       	ldi	r18, 0xF7	; 247
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	ce 01       	movw	r24, r28
    19f4:	05 96       	adiw	r24, 0x05	; 5
    19f6:	03 96       	adiw	r24, 0x03	; 3
    19f8:	fc 01       	movw	r30, r24
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	44 0f       	add	r20, r20
    1a00:	44 0f       	add	r20, r20
    1a02:	44 0f       	add	r20, r20
    1a04:	ce 01       	movw	r24, r28
    1a06:	05 96       	adiw	r24, 0x05	; 5
    1a08:	02 96       	adiw	r24, 0x02	; 2
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	80 81       	ld	r24, Z
    1a0e:	82 95       	swap	r24
    1a10:	86 95       	lsr	r24
    1a12:	87 70       	andi	r24, 0x07	; 7
    1a14:	84 0f       	add	r24, r20
    1a16:	f9 01       	movw	r30, r18
    1a18:	80 83       	st	Z, r24
    1a1a:	26 ef       	ldi	r18, 0xF6	; 246
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	ce 01       	movw	r24, r28
    1a20:	05 96       	adiw	r24, 0x05	; 5
    1a22:	02 96       	adiw	r24, 0x02	; 2
    1a24:	fc 01       	movw	r30, r24
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	44 0f       	add	r20, r20
    1a2c:	44 0f       	add	r20, r20
    1a2e:	44 0f       	add	r20, r20
    1a30:	ce 01       	movw	r24, r28
    1a32:	05 96       	adiw	r24, 0x05	; 5
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	fc 01       	movw	r30, r24
    1a38:	80 81       	ld	r24, Z
    1a3a:	82 95       	swap	r24
    1a3c:	86 95       	lsr	r24
    1a3e:	87 70       	andi	r24, 0x07	; 7
    1a40:	84 0f       	add	r24, r20
    1a42:	f9 01       	movw	r30, r18
    1a44:	80 83       	st	Z, r24
    1a46:	25 ef       	ldi	r18, 0xF5	; 245
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	05 96       	adiw	r24, 0x05	; 5
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	fc 01       	movw	r30, r24
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	44 0f       	add	r20, r20
    1a58:	44 0f       	add	r20, r20
    1a5a:	44 0f       	add	r20, r20
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	05 96       	adiw	r24, 0x05	; 5
    1a60:	fc 01       	movw	r30, r24
    1a62:	80 81       	ld	r24, Z
    1a64:	82 95       	swap	r24
    1a66:	86 95       	lsr	r24
    1a68:	87 70       	andi	r24, 0x07	; 7
    1a6a:	84 0f       	add	r24, r20
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	80 83       	st	Z, r24
    1a70:	84 ef       	ldi	r24, 0xF4	; 244
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9e 01       	movw	r18, r28
    1a76:	2b 5f       	subi	r18, 0xFB	; 251
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	20 81       	ld	r18, Z
    1a7e:	22 0f       	add	r18, r18
    1a80:	22 0f       	add	r18, r18
    1a82:	22 0f       	add	r18, r18
    1a84:	fc 01       	movw	r30, r24
    1a86:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1a88:	8f ee       	ldi	r24, 0xEF	; 239
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	2f ee       	ldi	r18, 0xEF	; 239
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	f9 01       	movw	r30, r18
    1a92:	40 81       	ld	r20, Z
    1a94:	29 85       	ldd	r18, Y+9	; 0x09
    1a96:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a98:	f9 01       	movw	r30, r18
    1a9a:	26 81       	ldd	r18, Z+6	; 0x06
    1a9c:	24 2b       	or	r18, r20
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	22 87       	std	Z+10, r18	; 0x0a
    1aac:	84 ef       	ldi	r24, 0xF4	; 244
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	24 ef       	ldi	r18, 0xF4	; 244
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	f9 01       	movw	r30, r18
    1ab6:	20 81       	ld	r18, Z
    1ab8:	24 60       	ori	r18, 0x04	; 4
    1aba:	fc 01       	movw	r30, r24
    1abc:	20 83       	st	Z, r18
    1abe:	80 ef       	ldi	r24, 0xF0	; 240
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	20 ef       	ldi	r18, 0xF0	; 240
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	f9 01       	movw	r30, r18
    1ac8:	20 81       	ld	r18, Z
    1aca:	24 60       	ori	r18, 0x04	; 4
    1acc:	fc 01       	movw	r30, r24
    1ace:	20 83       	st	Z, r18
          Can_set_rplv();
    1ad0:	8f ee       	ldi	r24, 0xEF	; 239
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	2f ee       	ldi	r18, 0xEF	; 239
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	f9 01       	movw	r30, r18
    1ada:	20 81       	ld	r18, Z
    1adc:	20 62       	ori	r18, 0x20	; 32
    1ade:	fc 01       	movw	r30, r24
    1ae0:	20 83       	st	Z, r18
          Can_set_idemsk();
    1ae2:	84 ef       	ldi	r24, 0xF4	; 244
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	24 ef       	ldi	r18, 0xF4	; 244
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	f9 01       	movw	r30, r18
    1aec:	20 81       	ld	r18, Z
    1aee:	21 60       	ori	r18, 0x01	; 1
    1af0:	fc 01       	movw	r30, r24
    1af2:	20 83       	st	Z, r18
          Can_config_rx();       
    1af4:	8f ee       	ldi	r24, 0xEF	; 239
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	2f ee       	ldi	r18, 0xEF	; 239
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	f9 01       	movw	r30, r18
    1afe:	20 81       	ld	r18, Z
    1b00:	2f 73       	andi	r18, 0x3F	; 63
    1b02:	fc 01       	movw	r30, r24
    1b04:	20 83       	st	Z, r18
    1b06:	8f ee       	ldi	r24, 0xEF	; 239
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	2f ee       	ldi	r18, 0xEF	; 239
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	f9 01       	movw	r30, r18
    1b10:	20 81       	ld	r18, Z
    1b12:	20 68       	ori	r18, 0x80	; 128
    1b14:	fc 01       	movw	r30, r24
    1b16:	20 83       	st	Z, r18
          break;
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <__stack+0x1225>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	fc 01       	movw	r30, r24
    1b20:	11 86       	std	Z+9, r1	; 0x09
          break;
    1b22:	00 00       	nop
    1b24:	07 c0       	rjmp	.+14     	; 0x1b34 <__stack+0x1235>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	2f e1       	ldi	r18, 0x1F	; 31
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    1b30:	8f ef       	ldi	r24, 0xFF	; 255
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <__stack+0x1237>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1b34:	80 e0       	ldi	r24, 0x00	; 0
}
    1b36:	2a 96       	adiw	r28, 0x0a	; 10
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <can_get_status+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <can_get_status+0x8>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	81 85       	ldd	r24, Z+9	; 0x09
    1b60:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	88 23       	and	r24, r24
    1b66:	31 f0       	breq	.+12     	; 0x1b74 <can_get_status+0x2c>
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	8f 31       	cpi	r24, 0x1F	; 31
    1b6c:	19 f0       	breq	.+6      	; 0x1b74 <can_get_status+0x2c>
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	8f 3f       	cpi	r24, 0xFF	; 255
    1b72:	11 f4       	brne	.+4      	; 0x1b78 <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	11 c1       	rjmp	.+546    	; 0x1d9a <can_get_status+0x252>
    }

    Can_set_mob(cmd->handle);
    1b78:	8d ee       	ldi	r24, 0xED	; 237
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b80:	f9 01       	movw	r30, r18
    1b82:	20 81       	ld	r18, Z
    1b84:	22 95       	swap	r18
    1b86:	20 7f       	andi	r18, 0xF0	; 240
    1b88:	fc 01       	movw	r30, r24
    1b8a:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    1b8c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <can_get_mob_status>
    1b90:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	80 32       	cpi	r24, 0x20	; 32
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	89 f0       	breq	.+34     	; 0x1bc0 <can_get_status+0x78>
    1b9e:	81 32       	cpi	r24, 0x21	; 33
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	1c f4       	brge	.+6      	; 0x1baa <can_get_status+0x62>
    1ba4:	89 2b       	or	r24, r25
    1ba6:	49 f0       	breq	.+18     	; 0x1bba <can_get_status+0x72>
    1ba8:	e2 c0       	rjmp	.+452    	; 0x1d6e <can_get_status+0x226>
    1baa:	80 34       	cpi	r24, 0x40	; 64
    1bac:	91 05       	cpc	r25, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <can_get_status+0x6a>
    1bb0:	ca c0       	rjmp	.+404    	; 0x1d46 <can_get_status+0x1fe>
    1bb2:	80 3a       	cpi	r24, 0xA0	; 160
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <can_get_status+0x78>
    1bb8:	da c0       	rjmp	.+436    	; 0x1d6e <can_get_status+0x226>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	89 83       	std	Y+1, r24	; 0x01
            break;
    1bbe:	ec c0       	rjmp	.+472    	; 0x1d98 <can_get_status+0x250>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1bc0:	8f ee       	ldi	r24, 0xEF	; 239
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	80 81       	ld	r24, Z
    1bc8:	28 2f       	mov	r18, r24
    1bca:	2f 70       	andi	r18, 0x0F	; 15
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	fc 01       	movw	r30, r24
    1bda:	87 81       	ldd	r24, Z+7	; 0x07
    1bdc:	90 85       	ldd	r25, Z+8	; 0x08
    1bde:	0e 94 a4 02 	call	0x548	; 0x548 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1be2:	80 ef       	ldi	r24, 0xF0	; 240
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	fc 01       	movw	r30, r24
    1be8:	80 81       	ld	r24, Z
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	84 70       	andi	r24, 0x04	; 4
    1bf0:	99 27       	eor	r25, r25
    1bf2:	95 95       	asr	r25
    1bf4:	87 95       	ror	r24
    1bf6:	95 95       	asr	r25
    1bf8:	87 95       	ror	r24
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	fc 01       	movw	r30, r24
    1c02:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1c04:	8f ee       	ldi	r24, 0xEF	; 239
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	fc 01       	movw	r30, r24
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	80 71       	andi	r24, 0x10	; 16
    1c12:	99 27       	eor	r25, r25
    1c14:	95 95       	asr	r25
    1c16:	87 95       	ror	r24
    1c18:	95 95       	asr	r25
    1c1a:	87 95       	ror	r24
    1c1c:	95 95       	asr	r25
    1c1e:	87 95       	ror	r24
    1c20:	95 95       	asr	r25
    1c22:	87 95       	ror	r24
    1c24:	89 2b       	or	r24, r25
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <can_get_status+0xe2>
    1c28:	54 c0       	rjmp	.+168    	; 0x1cd2 <can_get_status+0x18a>
            {
                cmd->ctrl.ide = 1; // extended frame
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	21 e0       	ldi	r18, 0x01	; 1
    1c30:	fc 01       	movw	r30, r24
    1c32:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	02 96       	adiw	r24, 0x02	; 2
    1c3a:	03 96       	adiw	r24, 0x03	; 3
    1c3c:	23 ef       	ldi	r18, 0xF3	; 243
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	f9 01       	movw	r30, r18
    1c42:	20 81       	ld	r18, Z
    1c44:	26 95       	lsr	r18
    1c46:	26 95       	lsr	r18
    1c48:	26 95       	lsr	r18
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	20 83       	st	Z, r18
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	02 96       	adiw	r24, 0x02	; 2
    1c54:	02 96       	adiw	r24, 0x02	; 2
    1c56:	22 ef       	ldi	r18, 0xF2	; 242
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	20 81       	ld	r18, Z
    1c5e:	42 2f       	mov	r20, r18
    1c60:	46 95       	lsr	r20
    1c62:	46 95       	lsr	r20
    1c64:	46 95       	lsr	r20
    1c66:	23 ef       	ldi	r18, 0xF3	; 243
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	f9 01       	movw	r30, r18
    1c6c:	20 81       	ld	r18, Z
    1c6e:	22 95       	swap	r18
    1c70:	22 0f       	add	r18, r18
    1c72:	20 7e       	andi	r18, 0xE0	; 224
    1c74:	24 0f       	add	r18, r20
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 83       	st	Z, r18
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	02 96       	adiw	r24, 0x02	; 2
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	21 ef       	ldi	r18, 0xF1	; 241
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	f9 01       	movw	r30, r18
    1c88:	20 81       	ld	r18, Z
    1c8a:	42 2f       	mov	r20, r18
    1c8c:	46 95       	lsr	r20
    1c8e:	46 95       	lsr	r20
    1c90:	46 95       	lsr	r20
    1c92:	22 ef       	ldi	r18, 0xF2	; 242
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	f9 01       	movw	r30, r18
    1c98:	20 81       	ld	r18, Z
    1c9a:	22 95       	swap	r18
    1c9c:	22 0f       	add	r18, r18
    1c9e:	20 7e       	andi	r18, 0xE0	; 224
    1ca0:	24 0f       	add	r18, r20
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	02 96       	adiw	r24, 0x02	; 2
    1cac:	20 ef       	ldi	r18, 0xF0	; 240
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	20 81       	ld	r18, Z
    1cb4:	42 2f       	mov	r20, r18
    1cb6:	46 95       	lsr	r20
    1cb8:	46 95       	lsr	r20
    1cba:	46 95       	lsr	r20
    1cbc:	21 ef       	ldi	r18, 0xF1	; 241
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	f9 01       	movw	r30, r18
    1cc2:	20 81       	ld	r18, Z
    1cc4:	22 95       	swap	r18
    1cc6:	22 0f       	add	r18, r18
    1cc8:	20 7e       	andi	r18, 0xE0	; 224
    1cca:	24 0f       	add	r18, r20
    1ccc:	fc 01       	movw	r30, r24
    1cce:	20 83       	st	Z, r18
    1cd0:	26 c0       	rjmp	.+76     	; 0x1d1e <can_get_status+0x1d6>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	02 96       	adiw	r24, 0x02	; 2
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	23 ef       	ldi	r18, 0xF3	; 243
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	20 81       	ld	r18, Z
    1cea:	22 95       	swap	r18
    1cec:	26 95       	lsr	r18
    1cee:	27 70       	andi	r18, 0x07	; 7
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	20 83       	st	Z, r18
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	02 96       	adiw	r24, 0x02	; 2
    1cfa:	22 ef       	ldi	r18, 0xF2	; 242
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	f9 01       	movw	r30, r18
    1d00:	20 81       	ld	r18, Z
    1d02:	42 2f       	mov	r20, r18
    1d04:	42 95       	swap	r20
    1d06:	46 95       	lsr	r20
    1d08:	47 70       	andi	r20, 0x07	; 7
    1d0a:	23 ef       	ldi	r18, 0xF3	; 243
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	f9 01       	movw	r30, r18
    1d10:	20 81       	ld	r18, Z
    1d12:	22 0f       	add	r18, r18
    1d14:	22 0f       	add	r18, r18
    1d16:	22 0f       	add	r18, r18
    1d18:	24 0f       	add	r18, r20
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	2a 81       	ldd	r18, Y+2	; 0x02
    1d24:	fc 01       	movw	r30, r24
    1d26:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1d28:	8f ee       	ldi	r24, 0xEF	; 239
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	2f ee       	ldi	r18, 0xEF	; 239
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	f9 01       	movw	r30, r18
    1d32:	20 81       	ld	r18, Z
    1d34:	2f 73       	andi	r18, 0x3F	; 63
    1d36:	fc 01       	movw	r30, r24
    1d38:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1d3a:	8e ee       	ldi	r24, 0xEE	; 238
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	fc 01       	movw	r30, r24
    1d40:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1d42:	19 82       	std	Y+1, r1	; 0x01
            break;
    1d44:	29 c0       	rjmp	.+82     	; 0x1d98 <can_get_status+0x250>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1d50:	8f ee       	ldi	r24, 0xEF	; 239
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	2f ee       	ldi	r18, 0xEF	; 239
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	f9 01       	movw	r30, r18
    1d5a:	20 81       	ld	r18, Z
    1d5c:	2f 73       	andi	r18, 0x3F	; 63
    1d5e:	fc 01       	movw	r30, r24
    1d60:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1d62:	8e ee       	ldi	r24, 0xEE	; 238
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	fc 01       	movw	r30, r24
    1d68:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
            break;
    1d6c:	15 c0       	rjmp	.+42     	; 0x1d98 <can_get_status+0x250>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	2a 81       	ldd	r18, Y+2	; 0x02
    1d74:	fc 01       	movw	r30, r24
    1d76:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1d78:	8f ee       	ldi	r24, 0xEF	; 239
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	2f ee       	ldi	r18, 0xEF	; 239
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	f9 01       	movw	r30, r18
    1d82:	20 81       	ld	r18, Z
    1d84:	2f 73       	andi	r18, 0x3F	; 63
    1d86:	fc 01       	movw	r30, r24
    1d88:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1d8a:	8e ee       	ldi	r24, 0xEE	; 238
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	fc 01       	movw	r30, r24
    1d90:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	89 83       	std	Y+1, r24	; 0x01
            break;
    1d96:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <main>:
void can_rxMessage(void);
void can_txMessage(uint8_t *txData, uint16_t id);
void can_logEvent(st_cmd_t *msg);

/* -- main -- */
int main(void) {			
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    /********** System Initilization **********/
	timer1_init();
    1db0:	0e 94 87 00 	call	0x10e	; 0x10e <timer1_init>
	gpio_init();	
    1db4:	0e 94 68 00 	call	0xd0	; 0xd0 <gpio_init>
	uart_init(UART_BAUD_RATE);
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	7b e4       	ldi	r23, 0x4B	; 75
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 c8 00 	call	0x190	; 0x190 <uart_init>
	sei();
    1dc4:	78 94       	sei
	canInitFlag = can_init(0);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <can_init>
    1dcc:	80 93 58 02 	sts	0x0258, r24
	
	printf("CAN Bus monitor program for ECET 32300 and 42301\n\r");
    1dd0:	84 e3       	ldi	r24, 0x34	; 52
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	89 2f       	mov	r24, r25
    1dd6:	8f 93       	push	r24
    1dd8:	84 e3       	ldi	r24, 0x34	; 52
    1dda:	91 e0       	ldi	r25, 0x01	; 1
    1ddc:	8f 93       	push	r24
    1dde:	0e 94 1f 11 	call	0x223e	; 0x223e <printf>
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
	/************** System Loop **************/	
    while(1) 
	{	
		can_state = CAN_TX_ACTIVE;
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	80 93 37 02 	sts	0x0237, r24
		switch(can_state) 
    1dec:	80 91 37 02 	lds	r24, 0x0237
    1df0:	88 2f       	mov	r24, r24
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	19 f0       	breq	.+6      	; 0x1e00 <main+0x58>
    1dfa:	02 97       	sbiw	r24, 0x02	; 2
    1dfc:	21 f0       	breq	.+8      	; 0x1e06 <main+0x5e>
		{
			case CAN_INACTIVE:
				// TODO:: implement menu system to select modes
				break;
    1dfe:	0a c0       	rjmp	.+20     	; 0x1e14 <main+0x6c>
				
			case CAN_RX_ACTIVE:
				can_rxMessage();
    1e00:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <can_rxMessage>
				break;
    1e04:	07 c0       	rjmp	.+14     	; 0x1e14 <main+0x6c>
				
			case CAN_TX_ACTIVE:
				can_txMessage(Data_to_send, MY_ID);
    1e06:	63 e2       	ldi	r22, 0x23	; 35
    1e08:	71 e0       	ldi	r23, 0x01	; 1
    1e0a:	8e e0       	ldi	r24, 0x0E	; 14
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <can_txMessage>
				break;
    1e12:	00 00       	nop
		}
	}
    1e14:	e8 cf       	rjmp	.-48     	; 0x1de6 <main+0x3e>

00001e16 <can_rxMessage>:
	}
	return(1);
}

void can_rxMessage(void) 
{
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	1f 92       	push	r1
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	/* Init Rx Data */
	rx_message.pt_data = &canDataBuffer_rx[0];
    1e20:	88 e3       	ldi	r24, 0x38	; 56
    1e22:	92 e0       	ldi	r25, 0x02	; 2
    1e24:	90 93 48 02 	sts	0x0248, r25
    1e28:	80 93 47 02 	sts	0x0247, r24
	for(uint8_t i=0; i < DATA_BUFFER_SIZE_RX; i++) 
    1e2c:	19 82       	std	Y+1, r1	; 0x01
    1e2e:	0a c0       	rjmp	.+20     	; 0x1e44 <can_rxMessage+0x2e>
	{
		canDataBuffer_rx[i] = 0;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	88 2f       	mov	r24, r24
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	88 5c       	subi	r24, 0xC8	; 200
    1e38:	9d 4f       	sbci	r25, 0xFD	; 253
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	10 82       	st	Z, r1

void can_rxMessage(void) 
{
	/* Init Rx Data */
	rx_message.pt_data = &canDataBuffer_rx[0];
	for(uint8_t i=0; i < DATA_BUFFER_SIZE_RX; i++) 
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	8f 5f       	subi	r24, 0xFF	; 255
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	88 30       	cpi	r24, 0x08	; 8
    1e48:	98 f3       	brcs	.-26     	; 0x1e30 <can_rxMessage+0x1a>
	{
		canDataBuffer_rx[i] = 0;
	}
	/* Set to Rx Command */
	rx_message.cmd = CMD_RX;
    1e4a:	84 e0       	ldi	r24, 0x04	; 4
    1e4c:	80 93 41 02 	sts	0x0241, r24
	
	/* Enable Rx */
	while(can_cmd(&rx_message) != CAN_CMD_ACCEPTED);
    1e50:	00 00       	nop
    1e52:	80 e4       	ldi	r24, 0x40	; 64
    1e54:	92 e0       	ldi	r25, 0x02	; 2
    1e56:	0e 94 0e 03 	call	0x61c	; 0x61c <can_cmd>
    1e5a:	88 23       	and	r24, r24
    1e5c:	d1 f7       	brne	.-12     	; 0x1e52 <can_rxMessage+0x3c>
	
	/* Wait for Rx Complete */
	while(1) 
	{
		u8_temp = can_get_status(&rx_message);
    1e5e:	80 e4       	ldi	r24, 0x40	; 64
    1e60:	92 e0       	ldi	r25, 0x02	; 2
    1e62:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <can_get_status>
    1e66:	80 93 66 02 	sts	0x0266, r24
		if(u8_temp != CAN_STATUS_NOT_COMPLETED) break;	// break out of loop
    1e6a:	80 91 66 02 	lds	r24, 0x0266
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	91 f0       	breq	.+36     	; 0x1e96 <can_rxMessage+0x80>
    1e72:	00 00       	nop
	}
	//if(u8_temp == CAN_STATUS_ERROR) break;	// break out of function
	
	//logEvent("CAN Message Received");
	can_logEvent(&rx_message);
    1e74:	80 e4       	ldi	r24, 0x40	; 64
    1e76:	92 e0       	ldi	r25, 0x02	; 2
    1e78:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <can_logEvent>
	
	if((rx_message.id.ext == 0) || (rx_message.id.std == 0)) 
    1e7c:	80 91 42 02 	lds	r24, 0x0242
    1e80:	90 91 43 02 	lds	r25, 0x0243
    1e84:	a0 91 44 02 	lds	r26, 0x0244
    1e88:	b0 91 45 02 	lds	r27, 0x0245
    1e8c:	89 2b       	or	r24, r25
    1e8e:	8a 2b       	or	r24, r26
    1e90:	8b 2b       	or	r24, r27
    1e92:	41 f0       	breq	.+16     	; 0x1ea4 <can_rxMessage+0x8e>
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <can_rxMessage+0x82>
	/* Wait for Rx Complete */
	while(1) 
	{
		u8_temp = can_get_status(&rx_message);
		if(u8_temp != CAN_STATUS_NOT_COMPLETED) break;	// break out of loop
	}
    1e96:	e3 cf       	rjmp	.-58     	; 0x1e5e <can_rxMessage+0x48>
	//if(u8_temp == CAN_STATUS_ERROR) break;	// break out of function
	
	//logEvent("CAN Message Received");
	can_logEvent(&rx_message);
	
	if((rx_message.id.ext == 0) || (rx_message.id.std == 0)) 
    1e98:	80 91 42 02 	lds	r24, 0x0242
    1e9c:	90 91 43 02 	lds	r25, 0x0243
    1ea0:	89 2b       	or	r24, r25
    1ea2:	21 f4       	brne	.+8      	; 0x1eac <can_rxMessage+0x96>
	{
		logEvent("CAN ERROR Simulation, broke out of loop");
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	91 e0       	ldi	r25, 0x01	; 1
    1ea8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <logEvent>
	}
}
    1eac:	0f 90       	pop	r0
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	08 95       	ret

00001eb4 <can_txMessage>:

void can_txMessage(uint8_t *txData, uint16_t id)
{
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <can_txMessage+0x6>
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <can_txMessage+0x8>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <can_txMessage+0xa>
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
    1ec4:	8b 83       	std	Y+3, r24	; 0x03
    1ec6:	7e 83       	std	Y+6, r23	; 0x06
    1ec8:	6d 83       	std	Y+5, r22	; 0x05
	/* Copy Data into CAN Buffer */
	uint8_t buffer_size = sizeof(&txData);
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i=0; i < buffer_size; i++)
    1ece:	19 82       	std	Y+1, r1	; 0x01
    1ed0:	13 c0       	rjmp	.+38     	; 0x1ef8 <can_txMessage+0x44>
	{
		canDataBuffer_tx[i] = txData[i];
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	4b 81       	ldd	r20, Y+3	; 0x03
    1eda:	5c 81       	ldd	r21, Y+4	; 0x04
    1edc:	29 81       	ldd	r18, Y+1	; 0x01
    1ede:	22 2f       	mov	r18, r18
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	24 0f       	add	r18, r20
    1ee4:	35 1f       	adc	r19, r21
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	20 81       	ld	r18, Z
    1eea:	87 5a       	subi	r24, 0xA7	; 167
    1eec:	9d 4f       	sbci	r25, 0xFD	; 253
    1eee:	fc 01       	movw	r30, r24
    1ef0:	20 83       	st	Z, r18

void can_txMessage(uint8_t *txData, uint16_t id)
{
	/* Copy Data into CAN Buffer */
	uint8_t buffer_size = sizeof(&txData);
	for(uint8_t i=0; i < buffer_size; i++)
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	99 81       	ldd	r25, Y+1	; 0x01
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	98 17       	cp	r25, r24
    1efe:	48 f3       	brcs	.-46     	; 0x1ed2 <can_txMessage+0x1e>
	{
		canDataBuffer_tx[i] = txData[i];
	}
	
	/* Initialize Tx Data */
	tx_message.pt_data = &canDataBuffer_tx[0];	// pointer to first element in data buffer
    1f00:	89 e5       	ldi	r24, 0x59	; 89
    1f02:	92 e0       	ldi	r25, 0x02	; 2
    1f04:	90 93 54 02 	sts	0x0254, r25
    1f08:	80 93 53 02 	sts	0x0253, r24
	tx_message.id.std = id;	// CAN message ID
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	90 93 4f 02 	sts	0x024F, r25
    1f14:	80 93 4e 02 	sts	0x024E, r24
	tx_message.ctrl.ide = 0; // Sends standard (2.0A) CAN frames
    1f18:	10 92 57 02 	sts	0x0257, r1
	tx_message.ctrl.rtr = 1; // No remote response requested
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	80 93 56 02 	sts	0x0256, r24
    tx_message.dlc = buffer_size; // Number of data bytes in data field
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	80 93 52 02 	sts	0x0252, r24
	
	/* Set to Tx Command */
	tx_message.cmd = CMD_TX_DATA; 
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	80 93 4d 02 	sts	0x024D, r24
		
	/* Wait for Tx Complete */
	while(can_cmd(&tx_message) != CAN_CMD_ACCEPTED);
    1f2e:	00 00       	nop
    1f30:	8c e4       	ldi	r24, 0x4C	; 76
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	0e 94 0e 03 	call	0x61c	; 0x61c <can_cmd>
    1f38:	88 23       	and	r24, r24
    1f3a:	d1 f7       	brne	.-12     	; 0x1f30 <can_txMessage+0x7c>
	while(1) 
	{
		u8_temp = can_get_status(&tx_message);
    1f3c:	8c e4       	ldi	r24, 0x4C	; 76
    1f3e:	92 e0       	ldi	r25, 0x02	; 2
    1f40:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <can_get_status>
    1f44:	80 93 66 02 	sts	0x0266, r24
		if(u8_temp != CAN_STATUS_NOT_COMPLETED) break;
    1f48:	80 91 66 02 	lds	r24, 0x0266
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	31 f0       	breq	.+12     	; 0x1f5c <can_txMessage+0xa8>
    1f50:	00 00       	nop
	}
	
	if(u8_temp == CAN_STATUS_ERROR)
    1f52:	80 91 66 02 	lds	r24, 0x0266
    1f56:	82 30       	cpi	r24, 0x02	; 2
    1f58:	39 f4       	brne	.+14     	; 0x1f68 <can_txMessage+0xb4>
    1f5a:	01 c0       	rjmp	.+2      	; 0x1f5e <can_txMessage+0xaa>
	while(can_cmd(&tx_message) != CAN_CMD_ACCEPTED);
	while(1) 
	{
		u8_temp = can_get_status(&tx_message);
		if(u8_temp != CAN_STATUS_NOT_COMPLETED) break;
	}
    1f5c:	ef cf       	rjmp	.-34     	; 0x1f3c <can_txMessage+0x88>
	
	if(u8_temp == CAN_STATUS_ERROR)
	{
		logEvent("CAN ERROR");
    1f5e:	80 ef       	ldi	r24, 0xF0	; 240
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <logEvent>
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <can_txMessage+0xbc>
	}
	else
	{
		logEvent("Tx Complete");
    1f68:	8a ef       	ldi	r24, 0xFA	; 250
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <logEvent>
	}	
		
	if((tx_message.id.ext == 0) || (tx_message.id.std == 0)) 
    1f70:	80 91 4e 02 	lds	r24, 0x024E
    1f74:	90 91 4f 02 	lds	r25, 0x024F
    1f78:	a0 91 50 02 	lds	r26, 0x0250
    1f7c:	b0 91 51 02 	lds	r27, 0x0251
    1f80:	89 2b       	or	r24, r25
    1f82:	8a 2b       	or	r24, r26
    1f84:	8b 2b       	or	r24, r27
    1f86:	31 f0       	breq	.+12     	; 0x1f94 <can_txMessage+0xe0>
    1f88:	80 91 4e 02 	lds	r24, 0x024E
    1f8c:	90 91 4f 02 	lds	r25, 0x024F
    1f90:	89 2b       	or	r24, r25
    1f92:	21 f4       	brne	.+8      	; 0x1f9c <can_txMessage+0xe8>
	{
		logEvent("CAN ERROR Simulation, broke out of loop");
    1f94:	88 ec       	ldi	r24, 0xC8	; 200
    1f96:	91 e0       	ldi	r25, 0x01	; 1
    1f98:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <logEvent>
	}
}
    1f9c:	26 96       	adiw	r28, 0x06	; 6
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	08 95       	ret

00001fae <can_logEvent>:

void can_logEvent(st_cmd_t *msg) 
{
    1fae:	ef 92       	push	r14
    1fb0:	ff 92       	push	r15
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	28 97       	sbiw	r28, 0x08	; 8
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	// static variables will hold their values to be printed each pass whether they have been updated in the current cycle or not
	static int16_t voltage = 0;
	static int16_t current = 0;
	static uint8_t highest_error = 0;
	
	if (msg->ctrl.ide) 
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	83 85       	ldd	r24, Z+11	; 0x0b
    1fd6:	88 23       	and	r24, r24
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <can_logEvent+0x2e>
    1fda:	c5 c0       	rjmp	.+394    	; 0x2166 <can_logEvent+0x1b8>
	else 
	{
		

		// message 301h contains current and voltage values
		if (msg->id.std == 0x301)
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	93 40       	sbci	r25, 0x03	; 3
    1fea:	09 f0       	breq	.+2      	; 0x1fee <can_logEvent+0x40>
    1fec:	47 c0       	rjmp	.+142    	; 0x207c <can_logEvent+0xce>
		{
						
			voltage = *(msg->pt_data + 2);					// get the upper 8-bit from the array
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	87 81       	ldd	r24, Z+7	; 0x07
    1ff6:	90 85       	ldd	r25, Z+8	; 0x08
    1ff8:	02 96       	adiw	r24, 0x02	; 2
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	80 81       	ld	r24, Z
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	90 93 33 02 	sts	0x0233, r25
    2006:	80 93 32 02 	sts	0x0232, r24
			voltage = (voltage << 8) + *(msg->pt_data + 3);	// move the upper byte and add the lower byte - value is inflated by a factor of 10
    200a:	80 91 32 02 	lds	r24, 0x0232
    200e:	90 91 33 02 	lds	r25, 0x0233
    2012:	38 2f       	mov	r19, r24
    2014:	22 27       	eor	r18, r18
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	fc 01       	movw	r30, r24
    201c:	87 81       	ldd	r24, Z+7	; 0x07
    201e:	90 85       	ldd	r25, Z+8	; 0x08
    2020:	03 96       	adiw	r24, 0x03	; 3
    2022:	fc 01       	movw	r30, r24
    2024:	80 81       	ld	r24, Z
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	82 0f       	add	r24, r18
    202c:	93 1f       	adc	r25, r19
    202e:	90 93 33 02 	sts	0x0233, r25
    2032:	80 93 32 02 	sts	0x0232, r24
			
			current = *(msg->pt_data);						// get the upper of the current data
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	fc 01       	movw	r30, r24
    203c:	87 81       	ldd	r24, Z+7	; 0x07
    203e:	90 85       	ldd	r25, Z+8	; 0x08
    2040:	fc 01       	movw	r30, r24
    2042:	80 81       	ld	r24, Z
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	90 93 35 02 	sts	0x0235, r25
    204c:	80 93 34 02 	sts	0x0234, r24
			current = (current << 8) + *(msg->pt_data + 1);	// move the upper byte and add the lower byte - value is inflated by a factor of 10
    2050:	80 91 34 02 	lds	r24, 0x0234
    2054:	90 91 35 02 	lds	r25, 0x0235
    2058:	38 2f       	mov	r19, r24
    205a:	22 27       	eor	r18, r18
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	fc 01       	movw	r30, r24
    2062:	87 81       	ldd	r24, Z+7	; 0x07
    2064:	90 85       	ldd	r25, Z+8	; 0x08
    2066:	01 96       	adiw	r24, 0x01	; 1
    2068:	fc 01       	movw	r30, r24
    206a:	80 81       	ld	r24, Z
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	82 0f       	add	r24, r18
    2072:	93 1f       	adc	r25, r19
    2074:	90 93 35 02 	sts	0x0235, r25
    2078:	80 93 34 02 	sts	0x0234, r24
			
			//printf ("\n Volts = %d  Current = %d", voltage, current);
		}

		// message 610h contains the highest error reason code in byte 7
		if (msg->id.std == 0x610)
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	fc 01       	movw	r30, r24
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	80 31       	cpi	r24, 0x10	; 16
    2088:	96 40       	sbci	r25, 0x06	; 6
    208a:	49 f4       	brne	.+18     	; 0x209e <can_logEvent+0xf0>
		{
			highest_error = *(msg->pt_data + 7);
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	fc 01       	movw	r30, r24
    2092:	87 81       	ldd	r24, Z+7	; 0x07
    2094:	90 85       	ldd	r25, Z+8	; 0x08
    2096:	fc 01       	movw	r30, r24
    2098:	87 81       	ldd	r24, Z+7	; 0x07
    209a:	80 93 36 02 	sts	0x0236, r24
		}
		
		printf ("\n %02d.%d VDC  %03d.%d Amps   Error = %02d", (voltage / 10), (voltage % 10), (current / 10), ((uint16_t) current %10), highest_error);
    209e:	80 91 36 02 	lds	r24, 0x0236
    20a2:	e8 2f       	mov	r30, r24
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 91 34 02 	lds	r24, 0x0234
    20aa:	90 91 35 02 	lds	r25, 0x0235
    20ae:	ac 01       	movw	r20, r24
    20b0:	9a 01       	movw	r18, r20
    20b2:	ad ec       	ldi	r26, 0xCD	; 205
    20b4:	bc ec       	ldi	r27, 0xCC	; 204
    20b6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__umulhisi3>
    20ba:	9c 01       	movw	r18, r24
    20bc:	36 95       	lsr	r19
    20be:	27 95       	ror	r18
    20c0:	36 95       	lsr	r19
    20c2:	27 95       	ror	r18
    20c4:	36 95       	lsr	r19
    20c6:	27 95       	ror	r18
    20c8:	c9 01       	movw	r24, r18
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	9c 01       	movw	r18, r24
    20d0:	22 0f       	add	r18, r18
    20d2:	33 1f       	adc	r19, r19
    20d4:	22 0f       	add	r18, r18
    20d6:	33 1f       	adc	r19, r19
    20d8:	82 0f       	add	r24, r18
    20da:	93 1f       	adc	r25, r19
    20dc:	9a 01       	movw	r18, r20
    20de:	28 1b       	sub	r18, r24
    20e0:	39 0b       	sbc	r19, r25
    20e2:	80 91 34 02 	lds	r24, 0x0234
    20e6:	90 91 35 02 	lds	r25, 0x0235
    20ea:	4a e0       	ldi	r20, 0x0A	; 10
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	ba 01       	movw	r22, r20
    20f0:	0e 94 c0 10 	call	0x2180	; 0x2180 <__divmodhi4>
    20f4:	cb 01       	movw	r24, r22
    20f6:	7c 01       	movw	r14, r24
    20f8:	80 91 32 02 	lds	r24, 0x0232
    20fc:	90 91 33 02 	lds	r25, 0x0233
    2100:	4a e0       	ldi	r20, 0x0A	; 10
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	ba 01       	movw	r22, r20
    2106:	0e 94 c0 10 	call	0x2180	; 0x2180 <__divmodhi4>
    210a:	8c 01       	movw	r16, r24
    210c:	80 91 32 02 	lds	r24, 0x0232
    2110:	90 91 33 02 	lds	r25, 0x0233
    2114:	4a e0       	ldi	r20, 0x0A	; 10
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	ba 01       	movw	r22, r20
    211a:	0e 94 c0 10 	call	0x2180	; 0x2180 <__divmodhi4>
    211e:	cb 01       	movw	r24, r22
    2120:	4f 2f       	mov	r20, r31
    2122:	4f 93       	push	r20
    2124:	4e 2f       	mov	r20, r30
    2126:	4f 93       	push	r20
    2128:	43 2f       	mov	r20, r19
    212a:	4f 93       	push	r20
    212c:	2f 93       	push	r18
    212e:	2f 2d       	mov	r18, r15
    2130:	2f 93       	push	r18
    2132:	2e 2d       	mov	r18, r14
    2134:	2f 93       	push	r18
    2136:	21 2f       	mov	r18, r17
    2138:	2f 93       	push	r18
    213a:	20 2f       	mov	r18, r16
    213c:	2f 93       	push	r18
    213e:	29 2f       	mov	r18, r25
    2140:	2f 93       	push	r18
    2142:	8f 93       	push	r24
    2144:	86 e0       	ldi	r24, 0x06	; 6
    2146:	92 e0       	ldi	r25, 0x02	; 2
    2148:	89 2f       	mov	r24, r25
    214a:	8f 93       	push	r24
    214c:	86 e0       	ldi	r24, 0x06	; 6
    214e:	92 e0       	ldi	r25, 0x02	; 2
    2150:	8f 93       	push	r24
    2152:	0e 94 1f 11 	call	0x223e	; 0x223e <printf>
    2156:	8d b7       	in	r24, 0x3d	; 61
    2158:	9e b7       	in	r25, 0x3e	; 62
    215a:	0c 96       	adiw	r24, 0x0c	; 12
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
		
	}
    2166:	28 96       	adiw	r28, 0x08	; 8
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	08 95       	ret

00002180 <__divmodhi4>:
    2180:	97 fb       	bst	r25, 7
    2182:	07 2e       	mov	r0, r23
    2184:	16 f4       	brtc	.+4      	; 0x218a <__divmodhi4+0xa>
    2186:	00 94       	com	r0
    2188:	07 d0       	rcall	.+14     	; 0x2198 <__divmodhi4_neg1>
    218a:	77 fd       	sbrc	r23, 7
    218c:	09 d0       	rcall	.+18     	; 0x21a0 <__divmodhi4_neg2>
    218e:	0e 94 0b 11 	call	0x2216	; 0x2216 <__udivmodhi4>
    2192:	07 fc       	sbrc	r0, 7
    2194:	05 d0       	rcall	.+10     	; 0x21a0 <__divmodhi4_neg2>
    2196:	3e f4       	brtc	.+14     	; 0x21a6 <__divmodhi4_exit>

00002198 <__divmodhi4_neg1>:
    2198:	90 95       	com	r25
    219a:	81 95       	neg	r24
    219c:	9f 4f       	sbci	r25, 0xFF	; 255
    219e:	08 95       	ret

000021a0 <__divmodhi4_neg2>:
    21a0:	70 95       	com	r23
    21a2:	61 95       	neg	r22
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255

000021a6 <__divmodhi4_exit>:
    21a6:	08 95       	ret

000021a8 <__udivmodsi4>:
    21a8:	a1 e2       	ldi	r26, 0x21	; 33
    21aa:	1a 2e       	mov	r1, r26
    21ac:	aa 1b       	sub	r26, r26
    21ae:	bb 1b       	sub	r27, r27
    21b0:	fd 01       	movw	r30, r26
    21b2:	0d c0       	rjmp	.+26     	; 0x21ce <__udivmodsi4_ep>

000021b4 <__udivmodsi4_loop>:
    21b4:	aa 1f       	adc	r26, r26
    21b6:	bb 1f       	adc	r27, r27
    21b8:	ee 1f       	adc	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	a2 17       	cp	r26, r18
    21be:	b3 07       	cpc	r27, r19
    21c0:	e4 07       	cpc	r30, r20
    21c2:	f5 07       	cpc	r31, r21
    21c4:	20 f0       	brcs	.+8      	; 0x21ce <__udivmodsi4_ep>
    21c6:	a2 1b       	sub	r26, r18
    21c8:	b3 0b       	sbc	r27, r19
    21ca:	e4 0b       	sbc	r30, r20
    21cc:	f5 0b       	sbc	r31, r21

000021ce <__udivmodsi4_ep>:
    21ce:	66 1f       	adc	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	88 1f       	adc	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	1a 94       	dec	r1
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <__udivmodsi4_loop>
    21da:	60 95       	com	r22
    21dc:	70 95       	com	r23
    21de:	80 95       	com	r24
    21e0:	90 95       	com	r25
    21e2:	9b 01       	movw	r18, r22
    21e4:	ac 01       	movw	r20, r24
    21e6:	bd 01       	movw	r22, r26
    21e8:	cf 01       	movw	r24, r30
    21ea:	08 95       	ret

000021ec <__tablejump2__>:
    21ec:	ee 0f       	add	r30, r30
    21ee:	ff 1f       	adc	r31, r31
    21f0:	05 90       	lpm	r0, Z+
    21f2:	f4 91       	lpm	r31, Z
    21f4:	e0 2d       	mov	r30, r0
    21f6:	09 94       	ijmp

000021f8 <__umulhisi3>:
    21f8:	a2 9f       	mul	r26, r18
    21fa:	b0 01       	movw	r22, r0
    21fc:	b3 9f       	mul	r27, r19
    21fe:	c0 01       	movw	r24, r0
    2200:	a3 9f       	mul	r26, r19
    2202:	70 0d       	add	r23, r0
    2204:	81 1d       	adc	r24, r1
    2206:	11 24       	eor	r1, r1
    2208:	91 1d       	adc	r25, r1
    220a:	b2 9f       	mul	r27, r18
    220c:	70 0d       	add	r23, r0
    220e:	81 1d       	adc	r24, r1
    2210:	11 24       	eor	r1, r1
    2212:	91 1d       	adc	r25, r1
    2214:	08 95       	ret

00002216 <__udivmodhi4>:
    2216:	aa 1b       	sub	r26, r26
    2218:	bb 1b       	sub	r27, r27
    221a:	51 e1       	ldi	r21, 0x11	; 17
    221c:	07 c0       	rjmp	.+14     	; 0x222c <__udivmodhi4_ep>

0000221e <__udivmodhi4_loop>:
    221e:	aa 1f       	adc	r26, r26
    2220:	bb 1f       	adc	r27, r27
    2222:	a6 17       	cp	r26, r22
    2224:	b7 07       	cpc	r27, r23
    2226:	10 f0       	brcs	.+4      	; 0x222c <__udivmodhi4_ep>
    2228:	a6 1b       	sub	r26, r22
    222a:	b7 0b       	sbc	r27, r23

0000222c <__udivmodhi4_ep>:
    222c:	88 1f       	adc	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	5a 95       	dec	r21
    2232:	a9 f7       	brne	.-22     	; 0x221e <__udivmodhi4_loop>
    2234:	80 95       	com	r24
    2236:	90 95       	com	r25
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	08 95       	ret

0000223e <printf>:
    223e:	a0 e0       	ldi	r26, 0x00	; 0
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e5 e2       	ldi	r30, 0x25	; 37
    2244:	f1 e1       	ldi	r31, 0x11	; 17
    2246:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__prologue_saves__+0x20>
    224a:	ae 01       	movw	r20, r28
    224c:	4b 5f       	subi	r20, 0xFB	; 251
    224e:	5f 4f       	sbci	r21, 0xFF	; 255
    2250:	fa 01       	movw	r30, r20
    2252:	61 91       	ld	r22, Z+
    2254:	71 91       	ld	r23, Z+
    2256:	af 01       	movw	r20, r30
    2258:	80 91 6a 02 	lds	r24, 0x026A
    225c:	90 91 6b 02 	lds	r25, 0x026B
    2260:	0e 94 35 11 	call	0x226a	; 0x226a <vfprintf>
    2264:	e2 e0       	ldi	r30, 0x02	; 2
    2266:	0c 94 df 13 	jmp	0x27be	; 0x27be <__epilogue_restores__+0x20>

0000226a <vfprintf>:
    226a:	ac e0       	ldi	r26, 0x0C	; 12
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	eb e3       	ldi	r30, 0x3B	; 59
    2270:	f1 e1       	ldi	r31, 0x11	; 17
    2272:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__prologue_saves__>
    2276:	7c 01       	movw	r14, r24
    2278:	6b 01       	movw	r12, r22
    227a:	8a 01       	movw	r16, r20
    227c:	fc 01       	movw	r30, r24
    227e:	17 82       	std	Z+7, r1	; 0x07
    2280:	16 82       	std	Z+6, r1	; 0x06
    2282:	83 81       	ldd	r24, Z+3	; 0x03
    2284:	81 ff       	sbrs	r24, 1
    2286:	bd c1       	rjmp	.+890    	; 0x2602 <vfprintf+0x398>
    2288:	ce 01       	movw	r24, r28
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	4c 01       	movw	r8, r24
    228e:	f7 01       	movw	r30, r14
    2290:	93 81       	ldd	r25, Z+3	; 0x03
    2292:	f6 01       	movw	r30, r12
    2294:	93 fd       	sbrc	r25, 3
    2296:	85 91       	lpm	r24, Z+
    2298:	93 ff       	sbrs	r25, 3
    229a:	81 91       	ld	r24, Z+
    229c:	6f 01       	movw	r12, r30
    229e:	88 23       	and	r24, r24
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <vfprintf+0x3a>
    22a2:	ab c1       	rjmp	.+854    	; 0x25fa <vfprintf+0x390>
    22a4:	85 32       	cpi	r24, 0x25	; 37
    22a6:	39 f4       	brne	.+14     	; 0x22b6 <vfprintf+0x4c>
    22a8:	93 fd       	sbrc	r25, 3
    22aa:	85 91       	lpm	r24, Z+
    22ac:	93 ff       	sbrs	r25, 3
    22ae:	81 91       	ld	r24, Z+
    22b0:	6f 01       	movw	r12, r30
    22b2:	85 32       	cpi	r24, 0x25	; 37
    22b4:	29 f4       	brne	.+10     	; 0x22c0 <vfprintf+0x56>
    22b6:	b7 01       	movw	r22, r14
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    22be:	e7 cf       	rjmp	.-50     	; 0x228e <vfprintf+0x24>
    22c0:	51 2c       	mov	r5, r1
    22c2:	31 2c       	mov	r3, r1
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	20 32       	cpi	r18, 0x20	; 32
    22c8:	a0 f4       	brcc	.+40     	; 0x22f2 <vfprintf+0x88>
    22ca:	8b 32       	cpi	r24, 0x2B	; 43
    22cc:	69 f0       	breq	.+26     	; 0x22e8 <vfprintf+0x7e>
    22ce:	30 f4       	brcc	.+12     	; 0x22dc <vfprintf+0x72>
    22d0:	80 32       	cpi	r24, 0x20	; 32
    22d2:	59 f0       	breq	.+22     	; 0x22ea <vfprintf+0x80>
    22d4:	83 32       	cpi	r24, 0x23	; 35
    22d6:	69 f4       	brne	.+26     	; 0x22f2 <vfprintf+0x88>
    22d8:	20 61       	ori	r18, 0x10	; 16
    22da:	2c c0       	rjmp	.+88     	; 0x2334 <vfprintf+0xca>
    22dc:	8d 32       	cpi	r24, 0x2D	; 45
    22de:	39 f0       	breq	.+14     	; 0x22ee <vfprintf+0x84>
    22e0:	80 33       	cpi	r24, 0x30	; 48
    22e2:	39 f4       	brne	.+14     	; 0x22f2 <vfprintf+0x88>
    22e4:	21 60       	ori	r18, 0x01	; 1
    22e6:	26 c0       	rjmp	.+76     	; 0x2334 <vfprintf+0xca>
    22e8:	22 60       	ori	r18, 0x02	; 2
    22ea:	24 60       	ori	r18, 0x04	; 4
    22ec:	23 c0       	rjmp	.+70     	; 0x2334 <vfprintf+0xca>
    22ee:	28 60       	ori	r18, 0x08	; 8
    22f0:	21 c0       	rjmp	.+66     	; 0x2334 <vfprintf+0xca>
    22f2:	27 fd       	sbrc	r18, 7
    22f4:	27 c0       	rjmp	.+78     	; 0x2344 <vfprintf+0xda>
    22f6:	30 ed       	ldi	r19, 0xD0	; 208
    22f8:	38 0f       	add	r19, r24
    22fa:	3a 30       	cpi	r19, 0x0A	; 10
    22fc:	78 f4       	brcc	.+30     	; 0x231c <vfprintf+0xb2>
    22fe:	26 ff       	sbrs	r18, 6
    2300:	06 c0       	rjmp	.+12     	; 0x230e <vfprintf+0xa4>
    2302:	fa e0       	ldi	r31, 0x0A	; 10
    2304:	5f 9e       	mul	r5, r31
    2306:	30 0d       	add	r19, r0
    2308:	11 24       	eor	r1, r1
    230a:	53 2e       	mov	r5, r19
    230c:	13 c0       	rjmp	.+38     	; 0x2334 <vfprintf+0xca>
    230e:	8a e0       	ldi	r24, 0x0A	; 10
    2310:	38 9e       	mul	r3, r24
    2312:	30 0d       	add	r19, r0
    2314:	11 24       	eor	r1, r1
    2316:	33 2e       	mov	r3, r19
    2318:	20 62       	ori	r18, 0x20	; 32
    231a:	0c c0       	rjmp	.+24     	; 0x2334 <vfprintf+0xca>
    231c:	8e 32       	cpi	r24, 0x2E	; 46
    231e:	21 f4       	brne	.+8      	; 0x2328 <vfprintf+0xbe>
    2320:	26 fd       	sbrc	r18, 6
    2322:	6b c1       	rjmp	.+726    	; 0x25fa <vfprintf+0x390>
    2324:	20 64       	ori	r18, 0x40	; 64
    2326:	06 c0       	rjmp	.+12     	; 0x2334 <vfprintf+0xca>
    2328:	8c 36       	cpi	r24, 0x6C	; 108
    232a:	11 f4       	brne	.+4      	; 0x2330 <vfprintf+0xc6>
    232c:	20 68       	ori	r18, 0x80	; 128
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <vfprintf+0xca>
    2330:	88 36       	cpi	r24, 0x68	; 104
    2332:	41 f4       	brne	.+16     	; 0x2344 <vfprintf+0xda>
    2334:	f6 01       	movw	r30, r12
    2336:	93 fd       	sbrc	r25, 3
    2338:	85 91       	lpm	r24, Z+
    233a:	93 ff       	sbrs	r25, 3
    233c:	81 91       	ld	r24, Z+
    233e:	6f 01       	movw	r12, r30
    2340:	81 11       	cpse	r24, r1
    2342:	c1 cf       	rjmp	.-126    	; 0x22c6 <vfprintf+0x5c>
    2344:	98 2f       	mov	r25, r24
    2346:	9f 7d       	andi	r25, 0xDF	; 223
    2348:	95 54       	subi	r25, 0x45	; 69
    234a:	93 30       	cpi	r25, 0x03	; 3
    234c:	28 f4       	brcc	.+10     	; 0x2358 <vfprintf+0xee>
    234e:	0c 5f       	subi	r16, 0xFC	; 252
    2350:	1f 4f       	sbci	r17, 0xFF	; 255
    2352:	ff e3       	ldi	r31, 0x3F	; 63
    2354:	f9 83       	std	Y+1, r31	; 0x01
    2356:	0d c0       	rjmp	.+26     	; 0x2372 <vfprintf+0x108>
    2358:	83 36       	cpi	r24, 0x63	; 99
    235a:	31 f0       	breq	.+12     	; 0x2368 <vfprintf+0xfe>
    235c:	83 37       	cpi	r24, 0x73	; 115
    235e:	71 f0       	breq	.+28     	; 0x237c <vfprintf+0x112>
    2360:	83 35       	cpi	r24, 0x53	; 83
    2362:	09 f0       	breq	.+2      	; 0x2366 <vfprintf+0xfc>
    2364:	5b c0       	rjmp	.+182    	; 0x241c <vfprintf+0x1b2>
    2366:	22 c0       	rjmp	.+68     	; 0x23ac <vfprintf+0x142>
    2368:	f8 01       	movw	r30, r16
    236a:	80 81       	ld	r24, Z
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	0e 5f       	subi	r16, 0xFE	; 254
    2370:	1f 4f       	sbci	r17, 0xFF	; 255
    2372:	44 24       	eor	r4, r4
    2374:	43 94       	inc	r4
    2376:	51 2c       	mov	r5, r1
    2378:	54 01       	movw	r10, r8
    237a:	15 c0       	rjmp	.+42     	; 0x23a6 <vfprintf+0x13c>
    237c:	38 01       	movw	r6, r16
    237e:	f2 e0       	ldi	r31, 0x02	; 2
    2380:	6f 0e       	add	r6, r31
    2382:	71 1c       	adc	r7, r1
    2384:	f8 01       	movw	r30, r16
    2386:	a0 80       	ld	r10, Z
    2388:	b1 80       	ldd	r11, Z+1	; 0x01
    238a:	26 ff       	sbrs	r18, 6
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <vfprintf+0x12a>
    238e:	65 2d       	mov	r22, r5
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <vfprintf+0x12e>
    2394:	6f ef       	ldi	r22, 0xFF	; 255
    2396:	7f ef       	ldi	r23, 0xFF	; 255
    2398:	c5 01       	movw	r24, r10
    239a:	2c 87       	std	Y+12, r18	; 0x0c
    239c:	0e 94 12 13 	call	0x2624	; 0x2624 <strnlen>
    23a0:	2c 01       	movw	r4, r24
    23a2:	83 01       	movw	r16, r6
    23a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    23a6:	2f 77       	andi	r18, 0x7F	; 127
    23a8:	22 2e       	mov	r2, r18
    23aa:	17 c0       	rjmp	.+46     	; 0x23da <vfprintf+0x170>
    23ac:	38 01       	movw	r6, r16
    23ae:	f2 e0       	ldi	r31, 0x02	; 2
    23b0:	6f 0e       	add	r6, r31
    23b2:	71 1c       	adc	r7, r1
    23b4:	f8 01       	movw	r30, r16
    23b6:	a0 80       	ld	r10, Z
    23b8:	b1 80       	ldd	r11, Z+1	; 0x01
    23ba:	26 ff       	sbrs	r18, 6
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <vfprintf+0x15a>
    23be:	65 2d       	mov	r22, r5
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <vfprintf+0x15e>
    23c4:	6f ef       	ldi	r22, 0xFF	; 255
    23c6:	7f ef       	ldi	r23, 0xFF	; 255
    23c8:	c5 01       	movw	r24, r10
    23ca:	2c 87       	std	Y+12, r18	; 0x0c
    23cc:	0e 94 07 13 	call	0x260e	; 0x260e <strnlen_P>
    23d0:	2c 01       	movw	r4, r24
    23d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    23d4:	20 68       	ori	r18, 0x80	; 128
    23d6:	22 2e       	mov	r2, r18
    23d8:	83 01       	movw	r16, r6
    23da:	23 fc       	sbrc	r2, 3
    23dc:	1b c0       	rjmp	.+54     	; 0x2414 <vfprintf+0x1aa>
    23de:	83 2d       	mov	r24, r3
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	48 16       	cp	r4, r24
    23e4:	59 06       	cpc	r5, r25
    23e6:	b0 f4       	brcc	.+44     	; 0x2414 <vfprintf+0x1aa>
    23e8:	b7 01       	movw	r22, r14
    23ea:	80 e2       	ldi	r24, 0x20	; 32
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    23f2:	3a 94       	dec	r3
    23f4:	f4 cf       	rjmp	.-24     	; 0x23de <vfprintf+0x174>
    23f6:	f5 01       	movw	r30, r10
    23f8:	27 fc       	sbrc	r2, 7
    23fa:	85 91       	lpm	r24, Z+
    23fc:	27 fe       	sbrs	r2, 7
    23fe:	81 91       	ld	r24, Z+
    2400:	5f 01       	movw	r10, r30
    2402:	b7 01       	movw	r22, r14
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    240a:	31 10       	cpse	r3, r1
    240c:	3a 94       	dec	r3
    240e:	f1 e0       	ldi	r31, 0x01	; 1
    2410:	4f 1a       	sub	r4, r31
    2412:	51 08       	sbc	r5, r1
    2414:	41 14       	cp	r4, r1
    2416:	51 04       	cpc	r5, r1
    2418:	71 f7       	brne	.-36     	; 0x23f6 <vfprintf+0x18c>
    241a:	e5 c0       	rjmp	.+458    	; 0x25e6 <vfprintf+0x37c>
    241c:	84 36       	cpi	r24, 0x64	; 100
    241e:	11 f0       	breq	.+4      	; 0x2424 <vfprintf+0x1ba>
    2420:	89 36       	cpi	r24, 0x69	; 105
    2422:	39 f5       	brne	.+78     	; 0x2472 <vfprintf+0x208>
    2424:	f8 01       	movw	r30, r16
    2426:	27 ff       	sbrs	r18, 7
    2428:	07 c0       	rjmp	.+14     	; 0x2438 <vfprintf+0x1ce>
    242a:	60 81       	ld	r22, Z
    242c:	71 81       	ldd	r23, Z+1	; 0x01
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
    2432:	0c 5f       	subi	r16, 0xFC	; 252
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	08 c0       	rjmp	.+16     	; 0x2448 <vfprintf+0x1de>
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	07 2e       	mov	r0, r23
    243e:	00 0c       	add	r0, r0
    2440:	88 0b       	sbc	r24, r24
    2442:	99 0b       	sbc	r25, r25
    2444:	0e 5f       	subi	r16, 0xFE	; 254
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	2f 76       	andi	r18, 0x6F	; 111
    244a:	72 2e       	mov	r7, r18
    244c:	97 ff       	sbrs	r25, 7
    244e:	09 c0       	rjmp	.+18     	; 0x2462 <vfprintf+0x1f8>
    2450:	90 95       	com	r25
    2452:	80 95       	com	r24
    2454:	70 95       	com	r23
    2456:	61 95       	neg	r22
    2458:	7f 4f       	sbci	r23, 0xFF	; 255
    245a:	8f 4f       	sbci	r24, 0xFF	; 255
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	20 68       	ori	r18, 0x80	; 128
    2460:	72 2e       	mov	r7, r18
    2462:	2a e0       	ldi	r18, 0x0A	; 10
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	a4 01       	movw	r20, r8
    2468:	0e 94 55 13 	call	0x26aa	; 0x26aa <__ultoa_invert>
    246c:	a8 2e       	mov	r10, r24
    246e:	a8 18       	sub	r10, r8
    2470:	44 c0       	rjmp	.+136    	; 0x24fa <vfprintf+0x290>
    2472:	85 37       	cpi	r24, 0x75	; 117
    2474:	29 f4       	brne	.+10     	; 0x2480 <vfprintf+0x216>
    2476:	2f 7e       	andi	r18, 0xEF	; 239
    2478:	b2 2e       	mov	r11, r18
    247a:	2a e0       	ldi	r18, 0x0A	; 10
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	25 c0       	rjmp	.+74     	; 0x24ca <vfprintf+0x260>
    2480:	f2 2f       	mov	r31, r18
    2482:	f9 7f       	andi	r31, 0xF9	; 249
    2484:	bf 2e       	mov	r11, r31
    2486:	8f 36       	cpi	r24, 0x6F	; 111
    2488:	c1 f0       	breq	.+48     	; 0x24ba <vfprintf+0x250>
    248a:	18 f4       	brcc	.+6      	; 0x2492 <vfprintf+0x228>
    248c:	88 35       	cpi	r24, 0x58	; 88
    248e:	79 f0       	breq	.+30     	; 0x24ae <vfprintf+0x244>
    2490:	b4 c0       	rjmp	.+360    	; 0x25fa <vfprintf+0x390>
    2492:	80 37       	cpi	r24, 0x70	; 112
    2494:	19 f0       	breq	.+6      	; 0x249c <vfprintf+0x232>
    2496:	88 37       	cpi	r24, 0x78	; 120
    2498:	21 f0       	breq	.+8      	; 0x24a2 <vfprintf+0x238>
    249a:	af c0       	rjmp	.+350    	; 0x25fa <vfprintf+0x390>
    249c:	2f 2f       	mov	r18, r31
    249e:	20 61       	ori	r18, 0x10	; 16
    24a0:	b2 2e       	mov	r11, r18
    24a2:	b4 fe       	sbrs	r11, 4
    24a4:	0d c0       	rjmp	.+26     	; 0x24c0 <vfprintf+0x256>
    24a6:	8b 2d       	mov	r24, r11
    24a8:	84 60       	ori	r24, 0x04	; 4
    24aa:	b8 2e       	mov	r11, r24
    24ac:	09 c0       	rjmp	.+18     	; 0x24c0 <vfprintf+0x256>
    24ae:	24 ff       	sbrs	r18, 4
    24b0:	0a c0       	rjmp	.+20     	; 0x24c6 <vfprintf+0x25c>
    24b2:	9f 2f       	mov	r25, r31
    24b4:	96 60       	ori	r25, 0x06	; 6
    24b6:	b9 2e       	mov	r11, r25
    24b8:	06 c0       	rjmp	.+12     	; 0x24c6 <vfprintf+0x25c>
    24ba:	28 e0       	ldi	r18, 0x08	; 8
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	05 c0       	rjmp	.+10     	; 0x24ca <vfprintf+0x260>
    24c0:	20 e1       	ldi	r18, 0x10	; 16
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <vfprintf+0x260>
    24c6:	20 e1       	ldi	r18, 0x10	; 16
    24c8:	32 e0       	ldi	r19, 0x02	; 2
    24ca:	f8 01       	movw	r30, r16
    24cc:	b7 fe       	sbrs	r11, 7
    24ce:	07 c0       	rjmp	.+14     	; 0x24de <vfprintf+0x274>
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	0c 5f       	subi	r16, 0xFC	; 252
    24da:	1f 4f       	sbci	r17, 0xFF	; 255
    24dc:	06 c0       	rjmp	.+12     	; 0x24ea <vfprintf+0x280>
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 5f       	subi	r16, 0xFE	; 254
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	a4 01       	movw	r20, r8
    24ec:	0e 94 55 13 	call	0x26aa	; 0x26aa <__ultoa_invert>
    24f0:	a8 2e       	mov	r10, r24
    24f2:	a8 18       	sub	r10, r8
    24f4:	fb 2d       	mov	r31, r11
    24f6:	ff 77       	andi	r31, 0x7F	; 127
    24f8:	7f 2e       	mov	r7, r31
    24fa:	76 fe       	sbrs	r7, 6
    24fc:	0b c0       	rjmp	.+22     	; 0x2514 <vfprintf+0x2aa>
    24fe:	37 2d       	mov	r19, r7
    2500:	3e 7f       	andi	r19, 0xFE	; 254
    2502:	a5 14       	cp	r10, r5
    2504:	50 f4       	brcc	.+20     	; 0x251a <vfprintf+0x2b0>
    2506:	74 fe       	sbrs	r7, 4
    2508:	0a c0       	rjmp	.+20     	; 0x251e <vfprintf+0x2b4>
    250a:	72 fc       	sbrc	r7, 2
    250c:	08 c0       	rjmp	.+16     	; 0x251e <vfprintf+0x2b4>
    250e:	37 2d       	mov	r19, r7
    2510:	3e 7e       	andi	r19, 0xEE	; 238
    2512:	05 c0       	rjmp	.+10     	; 0x251e <vfprintf+0x2b4>
    2514:	ba 2c       	mov	r11, r10
    2516:	37 2d       	mov	r19, r7
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <vfprintf+0x2b6>
    251a:	ba 2c       	mov	r11, r10
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <vfprintf+0x2b6>
    251e:	b5 2c       	mov	r11, r5
    2520:	34 ff       	sbrs	r19, 4
    2522:	0d c0       	rjmp	.+26     	; 0x253e <vfprintf+0x2d4>
    2524:	fe 01       	movw	r30, r28
    2526:	ea 0d       	add	r30, r10
    2528:	f1 1d       	adc	r31, r1
    252a:	80 81       	ld	r24, Z
    252c:	80 33       	cpi	r24, 0x30	; 48
    252e:	11 f4       	brne	.+4      	; 0x2534 <vfprintf+0x2ca>
    2530:	39 7e       	andi	r19, 0xE9	; 233
    2532:	09 c0       	rjmp	.+18     	; 0x2546 <vfprintf+0x2dc>
    2534:	32 ff       	sbrs	r19, 2
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <vfprintf+0x2da>
    2538:	b3 94       	inc	r11
    253a:	b3 94       	inc	r11
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <vfprintf+0x2dc>
    253e:	83 2f       	mov	r24, r19
    2540:	86 78       	andi	r24, 0x86	; 134
    2542:	09 f0       	breq	.+2      	; 0x2546 <vfprintf+0x2dc>
    2544:	b3 94       	inc	r11
    2546:	33 fd       	sbrc	r19, 3
    2548:	13 c0       	rjmp	.+38     	; 0x2570 <vfprintf+0x306>
    254a:	30 ff       	sbrs	r19, 0
    254c:	06 c0       	rjmp	.+12     	; 0x255a <vfprintf+0x2f0>
    254e:	5a 2c       	mov	r5, r10
    2550:	b3 14       	cp	r11, r3
    2552:	18 f4       	brcc	.+6      	; 0x255a <vfprintf+0x2f0>
    2554:	53 0c       	add	r5, r3
    2556:	5b 18       	sub	r5, r11
    2558:	b3 2c       	mov	r11, r3
    255a:	b3 14       	cp	r11, r3
    255c:	68 f4       	brcc	.+26     	; 0x2578 <vfprintf+0x30e>
    255e:	b7 01       	movw	r22, r14
    2560:	80 e2       	ldi	r24, 0x20	; 32
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	3c 87       	std	Y+12, r19	; 0x0c
    2566:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    256a:	b3 94       	inc	r11
    256c:	3c 85       	ldd	r19, Y+12	; 0x0c
    256e:	f5 cf       	rjmp	.-22     	; 0x255a <vfprintf+0x2f0>
    2570:	b3 14       	cp	r11, r3
    2572:	10 f4       	brcc	.+4      	; 0x2578 <vfprintf+0x30e>
    2574:	3b 18       	sub	r3, r11
    2576:	01 c0       	rjmp	.+2      	; 0x257a <vfprintf+0x310>
    2578:	31 2c       	mov	r3, r1
    257a:	34 ff       	sbrs	r19, 4
    257c:	12 c0       	rjmp	.+36     	; 0x25a2 <vfprintf+0x338>
    257e:	b7 01       	movw	r22, r14
    2580:	80 e3       	ldi	r24, 0x30	; 48
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	3c 87       	std	Y+12, r19	; 0x0c
    2586:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    258a:	3c 85       	ldd	r19, Y+12	; 0x0c
    258c:	32 ff       	sbrs	r19, 2
    258e:	17 c0       	rjmp	.+46     	; 0x25be <vfprintf+0x354>
    2590:	31 fd       	sbrc	r19, 1
    2592:	03 c0       	rjmp	.+6      	; 0x259a <vfprintf+0x330>
    2594:	88 e7       	ldi	r24, 0x78	; 120
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 c0       	rjmp	.+4      	; 0x259e <vfprintf+0x334>
    259a:	88 e5       	ldi	r24, 0x58	; 88
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	b7 01       	movw	r22, r14
    25a0:	0c c0       	rjmp	.+24     	; 0x25ba <vfprintf+0x350>
    25a2:	83 2f       	mov	r24, r19
    25a4:	86 78       	andi	r24, 0x86	; 134
    25a6:	59 f0       	breq	.+22     	; 0x25be <vfprintf+0x354>
    25a8:	31 ff       	sbrs	r19, 1
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <vfprintf+0x346>
    25ac:	8b e2       	ldi	r24, 0x2B	; 43
    25ae:	01 c0       	rjmp	.+2      	; 0x25b2 <vfprintf+0x348>
    25b0:	80 e2       	ldi	r24, 0x20	; 32
    25b2:	37 fd       	sbrc	r19, 7
    25b4:	8d e2       	ldi	r24, 0x2D	; 45
    25b6:	b7 01       	movw	r22, r14
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    25be:	a5 14       	cp	r10, r5
    25c0:	38 f4       	brcc	.+14     	; 0x25d0 <vfprintf+0x366>
    25c2:	b7 01       	movw	r22, r14
    25c4:	80 e3       	ldi	r24, 0x30	; 48
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    25cc:	5a 94       	dec	r5
    25ce:	f7 cf       	rjmp	.-18     	; 0x25be <vfprintf+0x354>
    25d0:	aa 94       	dec	r10
    25d2:	f4 01       	movw	r30, r8
    25d4:	ea 0d       	add	r30, r10
    25d6:	f1 1d       	adc	r31, r1
    25d8:	80 81       	ld	r24, Z
    25da:	b7 01       	movw	r22, r14
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    25e2:	a1 10       	cpse	r10, r1
    25e4:	f5 cf       	rjmp	.-22     	; 0x25d0 <vfprintf+0x366>
    25e6:	33 20       	and	r3, r3
    25e8:	09 f4       	brne	.+2      	; 0x25ec <vfprintf+0x382>
    25ea:	51 ce       	rjmp	.-862    	; 0x228e <vfprintf+0x24>
    25ec:	b7 01       	movw	r22, r14
    25ee:	80 e2       	ldi	r24, 0x20	; 32
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    25f6:	3a 94       	dec	r3
    25f8:	f6 cf       	rjmp	.-20     	; 0x25e6 <vfprintf+0x37c>
    25fa:	f7 01       	movw	r30, r14
    25fc:	86 81       	ldd	r24, Z+6	; 0x06
    25fe:	97 81       	ldd	r25, Z+7	; 0x07
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <vfprintf+0x39c>
    2602:	8f ef       	ldi	r24, 0xFF	; 255
    2604:	9f ef       	ldi	r25, 0xFF	; 255
    2606:	2c 96       	adiw	r28, 0x0c	; 12
    2608:	e2 e1       	ldi	r30, 0x12	; 18
    260a:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__>

0000260e <strnlen_P>:
    260e:	fc 01       	movw	r30, r24
    2610:	05 90       	lpm	r0, Z+
    2612:	61 50       	subi	r22, 0x01	; 1
    2614:	70 40       	sbci	r23, 0x00	; 0
    2616:	01 10       	cpse	r0, r1
    2618:	d8 f7       	brcc	.-10     	; 0x2610 <strnlen_P+0x2>
    261a:	80 95       	com	r24
    261c:	90 95       	com	r25
    261e:	8e 0f       	add	r24, r30
    2620:	9f 1f       	adc	r25, r31
    2622:	08 95       	ret

00002624 <strnlen>:
    2624:	fc 01       	movw	r30, r24
    2626:	61 50       	subi	r22, 0x01	; 1
    2628:	70 40       	sbci	r23, 0x00	; 0
    262a:	01 90       	ld	r0, Z+
    262c:	01 10       	cpse	r0, r1
    262e:	d8 f7       	brcc	.-10     	; 0x2626 <strnlen+0x2>
    2630:	80 95       	com	r24
    2632:	90 95       	com	r25
    2634:	8e 0f       	add	r24, r30
    2636:	9f 1f       	adc	r25, r31
    2638:	08 95       	ret

0000263a <fputc>:
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	fb 01       	movw	r30, r22
    2644:	23 81       	ldd	r18, Z+3	; 0x03
    2646:	21 fd       	sbrc	r18, 1
    2648:	03 c0       	rjmp	.+6      	; 0x2650 <fputc+0x16>
    264a:	8f ef       	ldi	r24, 0xFF	; 255
    264c:	9f ef       	ldi	r25, 0xFF	; 255
    264e:	28 c0       	rjmp	.+80     	; 0x26a0 <fputc+0x66>
    2650:	22 ff       	sbrs	r18, 2
    2652:	16 c0       	rjmp	.+44     	; 0x2680 <fputc+0x46>
    2654:	46 81       	ldd	r20, Z+6	; 0x06
    2656:	57 81       	ldd	r21, Z+7	; 0x07
    2658:	24 81       	ldd	r18, Z+4	; 0x04
    265a:	35 81       	ldd	r19, Z+5	; 0x05
    265c:	42 17       	cp	r20, r18
    265e:	53 07       	cpc	r21, r19
    2660:	44 f4       	brge	.+16     	; 0x2672 <fputc+0x38>
    2662:	a0 81       	ld	r26, Z
    2664:	b1 81       	ldd	r27, Z+1	; 0x01
    2666:	9d 01       	movw	r18, r26
    2668:	2f 5f       	subi	r18, 0xFF	; 255
    266a:	3f 4f       	sbci	r19, 0xFF	; 255
    266c:	31 83       	std	Z+1, r19	; 0x01
    266e:	20 83       	st	Z, r18
    2670:	8c 93       	st	X, r24
    2672:	26 81       	ldd	r18, Z+6	; 0x06
    2674:	37 81       	ldd	r19, Z+7	; 0x07
    2676:	2f 5f       	subi	r18, 0xFF	; 255
    2678:	3f 4f       	sbci	r19, 0xFF	; 255
    267a:	37 83       	std	Z+7, r19	; 0x07
    267c:	26 83       	std	Z+6, r18	; 0x06
    267e:	10 c0       	rjmp	.+32     	; 0x26a0 <fputc+0x66>
    2680:	eb 01       	movw	r28, r22
    2682:	09 2f       	mov	r16, r25
    2684:	18 2f       	mov	r17, r24
    2686:	00 84       	ldd	r0, Z+8	; 0x08
    2688:	f1 85       	ldd	r31, Z+9	; 0x09
    268a:	e0 2d       	mov	r30, r0
    268c:	09 95       	icall
    268e:	89 2b       	or	r24, r25
    2690:	e1 f6       	brne	.-72     	; 0x264a <fputc+0x10>
    2692:	8e 81       	ldd	r24, Y+6	; 0x06
    2694:	9f 81       	ldd	r25, Y+7	; 0x07
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	9f 83       	std	Y+7, r25	; 0x07
    269a:	8e 83       	std	Y+6, r24	; 0x06
    269c:	81 2f       	mov	r24, r17
    269e:	90 2f       	mov	r25, r16
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

000026aa <__ultoa_invert>:
    26aa:	fa 01       	movw	r30, r20
    26ac:	aa 27       	eor	r26, r26
    26ae:	28 30       	cpi	r18, 0x08	; 8
    26b0:	51 f1       	breq	.+84     	; 0x2706 <__ultoa_invert+0x5c>
    26b2:	20 31       	cpi	r18, 0x10	; 16
    26b4:	81 f1       	breq	.+96     	; 0x2716 <__ultoa_invert+0x6c>
    26b6:	e8 94       	clt
    26b8:	6f 93       	push	r22
    26ba:	6e 7f       	andi	r22, 0xFE	; 254
    26bc:	6e 5f       	subi	r22, 0xFE	; 254
    26be:	7f 4f       	sbci	r23, 0xFF	; 255
    26c0:	8f 4f       	sbci	r24, 0xFF	; 255
    26c2:	9f 4f       	sbci	r25, 0xFF	; 255
    26c4:	af 4f       	sbci	r26, 0xFF	; 255
    26c6:	b1 e0       	ldi	r27, 0x01	; 1
    26c8:	3e d0       	rcall	.+124    	; 0x2746 <__ultoa_invert+0x9c>
    26ca:	b4 e0       	ldi	r27, 0x04	; 4
    26cc:	3c d0       	rcall	.+120    	; 0x2746 <__ultoa_invert+0x9c>
    26ce:	67 0f       	add	r22, r23
    26d0:	78 1f       	adc	r23, r24
    26d2:	89 1f       	adc	r24, r25
    26d4:	9a 1f       	adc	r25, r26
    26d6:	a1 1d       	adc	r26, r1
    26d8:	68 0f       	add	r22, r24
    26da:	79 1f       	adc	r23, r25
    26dc:	8a 1f       	adc	r24, r26
    26de:	91 1d       	adc	r25, r1
    26e0:	a1 1d       	adc	r26, r1
    26e2:	6a 0f       	add	r22, r26
    26e4:	71 1d       	adc	r23, r1
    26e6:	81 1d       	adc	r24, r1
    26e8:	91 1d       	adc	r25, r1
    26ea:	a1 1d       	adc	r26, r1
    26ec:	20 d0       	rcall	.+64     	; 0x272e <__ultoa_invert+0x84>
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <__ultoa_invert+0x48>
    26f0:	68 94       	set
    26f2:	3f 91       	pop	r19
    26f4:	2a e0       	ldi	r18, 0x0A	; 10
    26f6:	26 9f       	mul	r18, r22
    26f8:	11 24       	eor	r1, r1
    26fa:	30 19       	sub	r19, r0
    26fc:	30 5d       	subi	r19, 0xD0	; 208
    26fe:	31 93       	st	Z+, r19
    2700:	de f6       	brtc	.-74     	; 0x26b8 <__ultoa_invert+0xe>
    2702:	cf 01       	movw	r24, r30
    2704:	08 95       	ret
    2706:	46 2f       	mov	r20, r22
    2708:	47 70       	andi	r20, 0x07	; 7
    270a:	40 5d       	subi	r20, 0xD0	; 208
    270c:	41 93       	st	Z+, r20
    270e:	b3 e0       	ldi	r27, 0x03	; 3
    2710:	0f d0       	rcall	.+30     	; 0x2730 <__ultoa_invert+0x86>
    2712:	c9 f7       	brne	.-14     	; 0x2706 <__ultoa_invert+0x5c>
    2714:	f6 cf       	rjmp	.-20     	; 0x2702 <__ultoa_invert+0x58>
    2716:	46 2f       	mov	r20, r22
    2718:	4f 70       	andi	r20, 0x0F	; 15
    271a:	40 5d       	subi	r20, 0xD0	; 208
    271c:	4a 33       	cpi	r20, 0x3A	; 58
    271e:	18 f0       	brcs	.+6      	; 0x2726 <__ultoa_invert+0x7c>
    2720:	49 5d       	subi	r20, 0xD9	; 217
    2722:	31 fd       	sbrc	r19, 1
    2724:	40 52       	subi	r20, 0x20	; 32
    2726:	41 93       	st	Z+, r20
    2728:	02 d0       	rcall	.+4      	; 0x272e <__ultoa_invert+0x84>
    272a:	a9 f7       	brne	.-22     	; 0x2716 <__ultoa_invert+0x6c>
    272c:	ea cf       	rjmp	.-44     	; 0x2702 <__ultoa_invert+0x58>
    272e:	b4 e0       	ldi	r27, 0x04	; 4
    2730:	a6 95       	lsr	r26
    2732:	97 95       	ror	r25
    2734:	87 95       	ror	r24
    2736:	77 95       	ror	r23
    2738:	67 95       	ror	r22
    273a:	ba 95       	dec	r27
    273c:	c9 f7       	brne	.-14     	; 0x2730 <__ultoa_invert+0x86>
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	61 05       	cpc	r22, r1
    2742:	71 05       	cpc	r23, r1
    2744:	08 95       	ret
    2746:	9b 01       	movw	r18, r22
    2748:	ac 01       	movw	r20, r24
    274a:	0a 2e       	mov	r0, r26
    274c:	06 94       	lsr	r0
    274e:	57 95       	ror	r21
    2750:	47 95       	ror	r20
    2752:	37 95       	ror	r19
    2754:	27 95       	ror	r18
    2756:	ba 95       	dec	r27
    2758:	c9 f7       	brne	.-14     	; 0x274c <__ultoa_invert+0xa2>
    275a:	62 0f       	add	r22, r18
    275c:	73 1f       	adc	r23, r19
    275e:	84 1f       	adc	r24, r20
    2760:	95 1f       	adc	r25, r21
    2762:	a0 1d       	adc	r26, r0
    2764:	08 95       	ret

00002766 <__prologue_saves__>:
    2766:	2f 92       	push	r2
    2768:	3f 92       	push	r3
    276a:	4f 92       	push	r4
    276c:	5f 92       	push	r5
    276e:	6f 92       	push	r6
    2770:	7f 92       	push	r7
    2772:	8f 92       	push	r8
    2774:	9f 92       	push	r9
    2776:	af 92       	push	r10
    2778:	bf 92       	push	r11
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	ca 1b       	sub	r28, r26
    2790:	db 0b       	sbc	r29, r27
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	09 94       	ijmp

0000279e <__epilogue_restores__>:
    279e:	2a 88       	ldd	r2, Y+18	; 0x12
    27a0:	39 88       	ldd	r3, Y+17	; 0x11
    27a2:	48 88       	ldd	r4, Y+16	; 0x10
    27a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    27b0:	b9 84       	ldd	r11, Y+9	; 0x09
    27b2:	c8 84       	ldd	r12, Y+8	; 0x08
    27b4:	df 80       	ldd	r13, Y+7	; 0x07
    27b6:	ee 80       	ldd	r14, Y+6	; 0x06
    27b8:	fd 80       	ldd	r15, Y+5	; 0x05
    27ba:	0c 81       	ldd	r16, Y+4	; 0x04
    27bc:	1b 81       	ldd	r17, Y+3	; 0x03
    27be:	aa 81       	ldd	r26, Y+2	; 0x02
    27c0:	b9 81       	ldd	r27, Y+1	; 0x01
    27c2:	ce 0f       	add	r28, r30
    27c4:	d1 1d       	adc	r29, r1
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	ed 01       	movw	r28, r26
    27d2:	08 95       	ret

000027d4 <_exit>:
    27d4:	f8 94       	cli

000027d6 <__stop_program>:
    27d6:	ff cf       	rjmp	.-2      	; 0x27d6 <__stop_program>
